
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\004\000\002\004\005\000\002\005\004" +
    "\000\002\006\003\000\002\006\005\000\002\007\011\000" +
    "\002\010\002\000\002\010\006\000\002\010\006\000\002" +
    "\010\006\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\012\002\000\002\012\003\000\002\013\003" +
    "\000\002\013\004\000\002\014\005\000\002\015\004\000" +
    "\002\016\003\000\002\016\005\000\002\017\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\004\011\004\001\002\000\004\004\064\001" +
    "\002\000\006\007\uffff\011\uffff\001\002\000\006\007\046" +
    "\011\004\001\002\000\004\012\014\001\002\000\004\002" +
    "\011\001\002\000\004\002\001\001\002\000\006\005\ufffb" +
    "\006\ufffb\001\002\000\006\005\043\006\042\001\002\000" +
    "\004\010\015\001\002\000\004\011\016\001\002\000\004" +
    "\010\017\001\002\000\004\020\020\001\002\000\004\010" +
    "\021\001\002\000\012\005\ufff8\006\ufff8\013\022\014\023" +
    "\001\002\000\006\015\035\017\034\001\002\000\010\015" +
    "\030\016\026\017\027\001\002\000\006\005\ufff9\006\ufff9" +
    "\001\002\000\004\020\031\001\002\000\004\020\ufff3\001" +
    "\002\000\004\020\ufff2\001\002\000\004\020\ufff4\001\002" +
    "\000\010\005\ufff1\006\ufff1\021\033\001\002\000\006\005" +
    "\ufff7\006\ufff7\001\002\000\006\005\ufff0\006\ufff0\001\002" +
    "\000\004\020\040\001\002\000\004\020\036\001\002\000" +
    "\010\005\ufff1\006\ufff1\021\033\001\002\000\006\005\ufff6" +
    "\006\ufff6\001\002\000\010\005\ufff1\006\ufff1\021\033\001" +
    "\002\000\006\005\ufff5\006\ufff5\001\002\000\006\007\ufffd" +
    "\011\ufffd\001\002\000\004\012\014\001\002\000\006\005" +
    "\ufffa\006\ufffa\001\002\000\006\007\ufffe\011\ufffe\001\002" +
    "\000\004\011\050\001\002\000\006\002\uffef\011\uffef\001" +
    "\002\000\004\010\063\001\002\000\006\002\000\011\050" +
    "\001\002\000\004\022\055\001\002\000\006\005\060\006" +
    "\057\001\002\000\006\005\uffeb\006\uffeb\001\002\000\004" +
    "\012\056\001\002\000\006\005\uffe9\006\uffe9\001\002\000" +
    "\006\002\uffed\011\uffed\001\002\000\004\022\055\001\002" +
    "\000\006\005\uffea\006\uffea\001\002\000\006\002\uffee\011" +
    "\uffee\001\002\000\004\022\uffec\001\002\000\004\012\ufffc" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\012\002\007\003\005\004\004\005\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\044" +
    "\005\006\001\001\000\006\006\012\007\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\023" +
    "\001\001\000\002\001\001\000\004\011\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\036\001\001\000\002\001\001\000" +
    "\004\012\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\050\014\046\015\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\061\015\051\001" +
    "\001\000\006\016\052\017\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.print("Library formatted incorrectly.\nERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Library EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Library ::= WritersBooks SECTION_SEPARATOR UsersLoans 
            { parser.Tree.reduce(3,"Library",0);
              Object RESULT =null;
		 System.out.println("Library formatted correctly."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Library",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // WritersBooks ::= WriterBooks 
            { parser.Tree.reduce(1,"WritersBooks",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WritersBooks",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // WritersBooks ::= WritersBooks WriterBooks 
            { parser.Tree.reduce(2,"WritersBooks",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WritersBooks",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // WriterBooks ::= Writer Books S 
            { parser.Tree.reduce(3,"WriterBooks",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriterBooks",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Writer ::= STRING ARROW 
            { parser.Tree.reduce(2,"Writer",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Writer",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Books ::= Book 
            { parser.Tree.reduce(1,"Books",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Books",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Books ::= Books C Book 
            { parser.Tree.reduce(3,"Books",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Books",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Book ::= ISBN COL STRING COL INT COL Collocation 
            { parser.Tree.reduce(7,"Book",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Book",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Collocation ::= 
            { parser.Tree.reduce(0,"Collocation",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Collocation",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Collocation ::= LS Genre INT Alpha 
            { parser.Tree.reduce(4,"Collocation",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Collocation",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Collocation ::= LI AV INT Alpha 
            { parser.Tree.reduce(4,"Collocation",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Collocation",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Collocation ::= LI SO INT Alpha 
            { parser.Tree.reduce(4,"Collocation",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Collocation",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Genre ::= AV 
            { parser.Tree.reduce(1,"Genre",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Genre",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Genre ::= BO 
            { parser.Tree.reduce(1,"Genre",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Genre",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Genre ::= SO 
            { parser.Tree.reduce(1,"Genre",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Genre",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Alpha ::= 
            { parser.Tree.reduce(0,"Alpha",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Alpha",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Alpha ::= ALPHA 
            { parser.Tree.reduce(1,"Alpha",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Alpha",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // UsersLoans ::= UserLoans 
            { parser.Tree.reduce(1,"UsersLoans",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UsersLoans",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // UsersLoans ::= UsersLoans UserLoans 
            { parser.Tree.reduce(2,"UsersLoans",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UsersLoans",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // UserLoans ::= User Loans S 
            { parser.Tree.reduce(3,"UserLoans",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UserLoans",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // User ::= STRING COL 
            { parser.Tree.reduce(2,"User",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("User",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Loans ::= Loan 
            { parser.Tree.reduce(1,"Loans",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Loans",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Loans ::= Loans C Loan 
            { parser.Tree.reduce(3,"Loans",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Loans",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Loan ::= DATE ISBN 
            { parser.Tree.reduce(2,"Loan",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Loan",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
