
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\033\004\000\002\033\003" +
    "\000\002\032\003\000\002\032\003\000\002\040\003\000" +
    "\002\040\004\000\002\037\007\000\002\037\007\000\002" +
    "\037\010\000\002\037\010\000\002\004\004\000\002\005" +
    "\006\000\002\036\002\000\002\036\004\000\002\044\005" +
    "\000\002\044\003\000\002\044\003\000\002\043\004\000" +
    "\002\043\006\000\002\010\003\000\002\010\004\000\002" +
    "\031\005\000\002\031\006\000\002\042\005\000\002\042" +
    "\003\000\002\041\003\000\002\041\006\000\002\041\005" +
    "\000\002\041\006\000\002\041\011\000\002\041\011\000" +
    "\002\045\004\000\002\045\003\000\002\030\005\000\002" +
    "\030\003\000\002\050\005\000\002\050\003\000\002\007" +
    "\003\000\002\007\002\000\002\006\004\000\002\006\004" +
    "\000\002\006\005\000\002\006\003\000\002\006\003\000" +
    "\002\047\003\000\002\047\002\000\002\051\004\000\002" +
    "\051\003\000\002\011\005\000\002\046\004\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\004" +
    "\000\002\046\004\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\024\005\000\002\024\005\000\002" +
    "\024\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\006\000\002\017\006\000\002\017\006\000\002\020\003" +
    "\000\002\020\002\000\002\052\005\000\002\052\003\000" +
    "\002\021\003\000\002\021\003\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\005\000\002\034\004\000" +
    "\002\034\004\000\002\034\003\000\002\012\011\000\002" +
    "\012\007\000\002\027\005\000\002\027\005\000\002\027" +
    "\003\000\002\027\003\000\002\022\005\000\002\013\007" +
    "\000\002\015\013\000\002\035\005\000\002\035\003\000" +
    "\002\014\004\000\002\014\003\000\002\016\011\000\002" +
    "\016\012\000\002\025\004\000\002\025\003\000\002\026" +
    "\006\000\002\023\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\016\004\uffd7\005\016\006\012\007\005\010" +
    "\023\011\010\001\002\000\020\002\ufffe\004\uffd7\005\016" +
    "\006\012\007\005\010\110\011\010\001\002\000\010\004" +
    "\uffd3\005\333\033\uffd3\001\002\000\006\044\117\046\332" +
    "\001\002\000\004\002\331\001\002\000\010\004\uffd8\041" +
    "\uffd8\050\uffd8\001\002\000\016\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\001\002\000\006\005\327\007" +
    "\326\001\002\000\020\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\001\002\000\004\004\322\001" +
    "\002\000\004\002\000\001\002\000\006\004\uffd2\033\uffd2" +
    "\001\002\000\006\004\026\033\031\001\002\000\016\004" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\001\002" +
    "\000\016\004\uffd7\005\016\006\012\007\005\010\023\011" +
    "\010\001\002\000\016\004\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\001\002\000\014\004\uffd7\005\016\006" +
    "\012\007\005\011\010\001\002\000\004\004\077\001\002" +
    "\000\006\004\026\033\031\001\002\000\016\037\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\046\uffdd\050\uffdd\001\002\000\006" +
    "\046\074\050\073\001\002\000\006\046\uffe5\050\uffe5\001" +
    "\002\000\006\004\026\033\031\001\002\000\014\037\033" +
    "\040\035\042\034\046\uffe4\050\uffe4\001\002\000\006\012" +
    "\067\031\070\001\002\000\006\012\050\043\051\001\002" +
    "\000\016\005\016\006\012\007\005\011\010\041\uffd7\050" +
    "\uffd7\001\002\000\006\041\uffed\050\uffed\001\002\000\006" +
    "\004\026\033\031\001\002\000\006\041\043\050\042\001" +
    "\002\000\006\041\uffee\050\uffee\001\002\000\010\005\016" +
    "\006\012\007\005\001\002\000\006\044\ufff5\046\ufff5\001" +
    "\002\000\006\041\uffef\050\uffef\001\002\000\010\041\uffec" +
    "\042\046\050\uffec\001\002\000\004\043\047\001\002\000" +
    "\006\041\uffeb\050\uffeb\001\002\000\004\043\066\001\002" +
    "\000\004\037\052\001\002\000\004\044\053\001\002\000" +
    "\006\012\054\013\057\001\002\000\006\045\uffdb\050\uffdb" +
    "\001\002\000\006\045\064\050\063\001\002\000\006\045" +
    "\061\050\060\001\002\000\006\045\uffd9\050\uffd9\001\002" +
    "\000\004\013\062\001\002\000\006\046\uffdf\050\uffdf\001" +
    "\002\000\006\045\uffda\050\uffda\001\002\000\004\012\065" +
    "\001\002\000\006\046\uffe0\050\uffe0\001\002\000\006\045" +
    "\uffdc\050\uffdc\001\002\000\006\046\uffe3\050\uffe3\001\002" +
    "\000\006\046\uffe2\050\uffe2\001\002\000\004\012\071\001" +
    "\002\000\006\046\uffe1\050\uffe1\001\002\000\016\037\uffde" +
    "\040\uffde\041\uffde\042\uffde\046\uffde\050\uffde\001\002\000" +
    "\006\004\026\033\031\001\002\000\054\004\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\017\uffe7\021" +
    "\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7\031\uffe7" +
    "\035\uffe7\036\uffe7\040\uffe7\044\uffe7\045\uffe7\046\uffe7\001" +
    "\002\000\006\046\uffe6\050\uffe6\001\002\000\012\037\033" +
    "\042\034\046\uffe4\050\uffe4\001\002\000\004\040\100\001" +
    "\002\000\016\005\016\006\012\007\005\011\010\041\uffd7" +
    "\050\uffd7\001\002\000\006\041\102\050\042\001\002\000" +
    "\006\044\ufff4\046\ufff4\001\002\000\020\002\uffff\004\uffd7" +
    "\005\016\006\012\007\005\010\110\011\010\001\002\000" +
    "\016\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\001\002\000\004\044\117\001\002\000\020\002\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\001\002" +
    "\000\006\004\026\033\031\001\002\000\014\004\uffd7\005" +
    "\016\006\012\007\005\011\010\001\002\000\006\004\026" +
    "\033\031\001\002\000\004\040\035\001\002\000\004\040" +
    "\114\001\002\000\016\005\016\006\012\007\005\011\010" +
    "\041\uffd7\050\uffd7\001\002\000\006\041\116\050\042\001" +
    "\002\000\006\044\ufff7\046\ufff7\001\002\000\014\005\016" +
    "\006\012\007\005\010\123\045\ufff1\001\002\000\052\004" +
    "\uffea\005\uffea\006\uffea\007\uffea\010\uffea\012\uffea\017\uffea" +
    "\021\uffea\022\uffea\024\uffea\025\uffea\026\uffea\030\uffea\031" +
    "\uffea\035\uffea\036\uffea\040\uffea\044\uffea\045\uffea\046\uffea" +
    "\001\002\000\004\045\320\001\002\000\006\004\026\033" +
    "\031\001\002\000\010\005\016\006\012\007\005\001\002" +
    "\000\052\004\142\005\016\006\012\007\005\010\123\012" +
    "\153\017\137\021\134\022\136\024\156\025\150\026\135" +
    "\030\132\031\152\035\126\036\140\040\144\044\130\045" +
    "\uffd0\046\127\001\002\000\050\004\uffca\012\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\035\uffca\036\uffca\040\uffca" +
    "\044\uffca\045\uffca\046\uffca\001\002\000\020\004\167\012" +
    "\153\030\132\031\152\035\126\036\140\040\144\001\002" +
    "\000\050\004\uffc4\012\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\035\uffc4\036\uffc4\040\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\001\002\000\042\004\142\012\153\017\137\021\134" +
    "\022\136\024\156\025\150\026\135\030\132\031\152\035" +
    "\126\036\140\040\144\044\130\045\uffd0\046\127\001\002" +
    "\000\026\030\205\031\176\032\200\033\206\034\201\035" +
    "\177\036\203\041\uffc1\046\uffc1\050\uffc1\001\002\000\020" +
    "\004\167\012\153\030\132\031\152\035\126\036\140\040" +
    "\144\001\002\000\052\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\012\uffe9\017\uffe9\021\uffe9\022\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\030\uffe9\031\uffe9\035\uffe9\036\uffe9\040\uffe9" +
    "\044\uffe9\045\uffe9\046\uffe9\001\002\000\004\040\305\001" +
    "\002\000\022\004\167\012\153\030\132\031\152\035\126" +
    "\036\140\040\144\046\uff9c\001\002\000\004\040\263\001" +
    "\002\000\004\040\255\001\002\000\020\004\167\012\153" +
    "\030\132\031\152\035\126\036\140\040\144\001\002\000" +
    "\050\004\uffc9\012\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\035\uffc9\036\uffc9\040\uffc9\044\uffc9\045\uffc9\046\uffc9" +
    "\001\002\000\036\016\251\030\uffc0\031\uffc0\032\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\250\040\225\041\uffc0" +
    "\042\224\046\uffc0\050\uffc0\001\002\000\004\045\ufff0\001" +
    "\002\000\020\004\167\012\153\030\132\031\152\035\126" +
    "\036\140\040\144\001\002\000\004\046\246\001\002\000" +
    "\050\004\uffc5\012\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\035\uffc5\036\uffc5\040\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\001\002\000\046\004\142\012\153\017\137\021\134\022" +
    "\136\023\uffd1\024\156\025\150\026\135\027\uffd1\030\132" +
    "\031\152\035\126\036\140\040\144\044\130\045\uffd1\046" +
    "\127\001\002\000\004\046\244\001\002\000\032\014\uffa9" +
    "\015\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035" +
    "\uffa9\036\uffa9\041\uffa9\046\uffa9\050\uffa9\001\002\000\020" +
    "\004\167\012\153\030\132\031\152\035\126\036\140\040" +
    "\144\001\002\000\032\014\uffbf\015\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\041\uffbf\046" +
    "\uffbf\050\uffbf\001\002\000\050\004\uffcb\012\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\035\uffcb\036\uffcb\040\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\001\002\000\050\004\uffc6\012" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\035\uffc6\036" +
    "\uffc6\040\uffc6\044\uffc6\045\uffc6\046\uffc6\001\002\000\004" +
    "\040\162\001\002\000\004\046\161\001\002\000\046\004" +
    "\uffce\012\uffce\017\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\035\uffce\036" +
    "\uffce\040\uffce\044\uffce\045\uffce\046\uffce\001\002\000\050" +
    "\004\uffcc\012\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\035\uffcc\036\uffcc\040\uffcc\044\uffcc\045\uffcc\046\uffcc\001" +
    "\002\000\020\004\142\012\153\030\132\031\152\035\126" +
    "\036\140\040\144\001\002\000\006\046\166\050\165\001" +
    "\002\000\010\041\uff9e\046\uff9e\050\uff9e\001\002\000\020" +
    "\004\142\012\153\030\132\031\152\035\126\036\140\040" +
    "\144\001\002\000\020\004\167\012\153\030\132\031\152" +
    "\035\126\036\140\040\172\001\002\000\036\014\uffc0\015" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\040\225\041\uffc0\042\224\046\uffc0\050\uffc0\001" +
    "\002\000\006\015\215\046\220\001\002\000\030\014\204" +
    "\015\uffa3\030\205\031\176\032\200\033\206\034\201\035" +
    "\177\036\203\041\uffa3\046\uffa3\001\002\000\020\004\167" +
    "\012\153\030\132\031\152\035\126\036\140\040\172\001" +
    "\002\000\010\015\uffa4\041\uffa4\046\uffa4\001\002\000\006" +
    "\015\215\041\216\001\002\000\026\014\204\015\uffa3\030" +
    "\205\031\176\032\200\033\206\034\201\035\177\036\203" +
    "\041\202\001\002\000\020\004\167\012\153\030\132\031" +
    "\152\035\126\036\140\040\144\001\002\000\032\014\uffb0" +
    "\015\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\041\uffb0\046\uffb0\050\uffb0\001\002\000\020" +
    "\004\167\012\153\030\132\031\152\035\126\036\140\040" +
    "\144\001\002\000\020\004\167\012\153\030\132\031\152" +
    "\035\126\036\140\040\144\001\002\000\032\014\uffac\015" +
    "\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac" +
    "\036\uffac\041\uffac\046\uffac\050\uffac\001\002\000\032\014" +
    "\uffae\015\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae" +
    "\035\uffae\036\uffae\041\uffae\046\uffae\050\uffae\001\002\000" +
    "\020\004\167\012\153\030\132\031\152\035\126\036\140" +
    "\040\144\001\002\000\020\004\167\012\153\030\132\031" +
    "\152\035\126\036\140\040\144\001\002\000\020\004\167" +
    "\012\153\030\132\031\152\035\126\036\140\040\144\001" +
    "\002\000\032\014\uffb2\015\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\177\036\203\041\uffb2\046\uffb2\050" +
    "\uffb2\001\002\000\032\014\uffb5\015\uffb5\030\uffb5\031\uffb5" +
    "\032\200\033\206\034\201\035\177\036\203\041\uffb5\046" +
    "\uffb5\050\uffb5\001\002\000\026\015\uffa2\030\205\031\176" +
    "\032\200\033\206\034\201\035\177\036\203\041\uffa2\046" +
    "\uffa2\001\002\000\032\014\uffb1\015\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\035\177\036\203\041\uffb1\046" +
    "\uffb1\050\uffb1\001\002\000\032\014\uffb3\015\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\177\036\203\041" +
    "\uffb3\046\uffb3\050\uffb3\001\002\000\032\014\uffb4\015\uffb4" +
    "\030\uffb4\031\uffb4\032\200\033\206\034\201\035\177\036" +
    "\203\041\uffb4\046\uffb4\050\uffb4\001\002\000\020\004\167" +
    "\012\153\030\132\031\152\035\126\036\140\040\172\001" +
    "\002\000\010\015\uffa5\041\uffa5\046\uffa5\001\002\000\010" +
    "\015\uffa6\041\uffa6\046\uffa6\001\002\000\020\004\142\012" +
    "\153\030\132\031\152\035\126\036\140\040\144\001\002" +
    "\000\006\041\222\050\165\001\002\000\040\004\142\012" +
    "\153\017\137\021\134\022\136\024\156\025\150\026\135" +
    "\030\132\031\152\035\126\036\140\040\144\044\130\046" +
    "\127\001\002\000\050\004\uffa0\012\uffa0\017\uffa0\020\uffa0" +
    "\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027" +
    "\uffa0\030\uffa0\031\uffa0\035\uffa0\036\uffa0\040\uffa0\044\uffa0" +
    "\045\uffa0\046\uffa0\001\002\000\006\004\236\012\237\001" +
    "\002\000\012\004\167\012\153\013\232\041\uffba\001\002" +
    "\000\006\041\uffb8\050\uffb8\001\002\000\006\041\uffbb\050" +
    "\234\001\002\000\004\041\233\001\002\000\006\041\uffb7" +
    "\050\uffb7\001\002\000\006\041\uffb6\050\uffb6\001\002\000" +
    "\032\014\uffbe\015\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\041\uffbe\046\uffbe\050\uffbe\001" +
    "\002\000\010\004\167\012\153\013\232\001\002\000\006" +
    "\041\uffb9\050\uffb9\001\002\000\004\043\241\001\002\000" +
    "\004\043\240\001\002\000\032\014\uffbd\015\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\041" +
    "\uffbd\046\uffbd\050\uffbd\001\002\000\032\014\uffbc\015\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\041\uffbc\046\uffbc\050\uffbc\001\002\000\010\041\uff9f" +
    "\046\uff9f\050\uff9f\001\002\000\032\014\uffab\015\uffab\030" +
    "\uffab\031\uffab\032\200\033\206\034\201\035\177\036\203" +
    "\041\uffab\046\uffab\050\uffab\001\002\000\050\004\uffc8\012" +
    "\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\035\uffc8\036" +
    "\uffc8\040\uffc8\044\uffc8\045\uffc8\046\uffc8\001\002\000\046" +
    "\004\uffcf\012\uffcf\017\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\035\uffcf" +
    "\036\uffcf\040\uffcf\044\uffcf\045\uffcf\046\uffcf\001\002\000" +
    "\050\004\uffc7\012\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\035\uffc7\036\uffc7\040\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\001\002\000\022\030\205\031\176\032\200\033\206\034" +
    "\201\035\177\036\203\041\202\001\002\000\020\004\167" +
    "\012\153\030\132\031\152\035\126\036\140\040\144\001" +
    "\002\000\020\004\167\012\153\030\132\031\152\035\126" +
    "\036\140\040\144\001\002\000\026\030\205\031\176\032" +
    "\200\033\206\034\201\035\177\036\203\041\uffc2\046\uffc2" +
    "\050\uffc2\001\002\000\026\030\205\031\176\032\200\033" +
    "\206\034\201\035\177\036\203\041\uffc3\046\uffc3\050\uffc3" +
    "\001\002\000\032\014\uffad\015\uffad\030\uffad\031\uffad\032" +
    "\uffad\033\uffad\034\uffad\035\uffad\036\uffad\041\uffad\046\uffad" +
    "\050\uffad\001\002\000\020\004\167\012\153\030\132\031" +
    "\152\035\126\036\140\040\172\001\002\000\006\015\215" +
    "\041\257\001\002\000\040\004\142\012\153\017\137\021" +
    "\134\022\136\024\156\025\150\026\135\030\132\031\152" +
    "\035\126\036\140\040\144\044\130\046\127\001\002\000" +
    "\050\004\uffa7\012\uffa7\017\uffa7\020\261\021\uffa7\022\uffa7" +
    "\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031" +
    "\uffa7\035\uffa7\036\uffa7\040\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\001\002\000\040\004\142\012\153\017\137\021\134\022" +
    "\136\024\156\025\150\026\135\030\132\031\152\035\126" +
    "\036\140\040\144\044\130\046\127\001\002\000\050\004" +
    "\uffa8\012\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\035" +
    "\uffa8\036\uffa8\040\uffa8\044\uffa8\045\uffa8\046\uffa8\001\002" +
    "\000\004\004\264\001\002\000\004\041\265\001\002\000" +
    "\004\044\266\001\002\000\004\023\271\001\002\000\010" +
    "\023\uff98\027\uff98\045\uff98\001\002\000\010\023\271\027" +
    "\275\045\300\001\002\000\004\012\272\001\002\000\004" +
    "\047\273\001\002\000\046\004\142\012\153\017\137\021" +
    "\134\022\136\023\uffd0\024\156\025\150\026\135\027\uffd0" +
    "\030\132\031\152\035\126\036\140\040\144\044\130\045" +
    "\uffd0\046\127\001\002\000\010\023\uff97\027\uff97\045\uff97" +
    "\001\002\000\004\047\302\001\002\000\004\045\301\001" +
    "\002\000\010\023\uff99\027\uff99\045\uff99\001\002\000\050" +
    "\004\uff9b\012\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023" +
    "\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\035\uff9b\036\uff9b\040\uff9b\044\uff9b\045\uff9b\046\uff9b\001" +
    "\002\000\050\004\uff9a\012\uff9a\017\uff9a\020\uff9a\021\uff9a" +
    "\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030" +
    "\uff9a\031\uff9a\035\uff9a\036\uff9a\040\uff9a\044\uff9a\045\uff9a" +
    "\046\uff9a\001\002\000\042\004\142\012\153\017\137\021" +
    "\134\022\136\024\156\025\150\026\135\030\132\031\152" +
    "\035\126\036\140\040\144\044\130\045\uffd0\046\127\001" +
    "\002\000\004\045\uff96\001\002\000\022\030\205\031\176" +
    "\032\200\033\206\034\201\035\177\036\203\046\uff9d\001" +
    "\002\000\020\004\167\012\153\030\132\031\152\035\126" +
    "\036\140\040\172\001\002\000\006\015\215\041\307\001" +
    "\002\000\040\004\142\012\153\017\137\021\134\022\136" +
    "\024\156\025\150\026\135\030\132\031\152\035\126\036" +
    "\140\040\144\044\130\046\127\001\002\000\050\004\uffa1" +
    "\012\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024" +
    "\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\035\uffa1" +
    "\036\uffa1\040\uffa1\044\uffa1\045\uffa1\046\uffa1\001\002\000" +
    "\032\014\uffaa\015\uffaa\030\uffaa\031\uffaa\032\200\033\206" +
    "\034\201\035\177\036\203\041\uffaa\046\uffaa\050\uffaa\001" +
    "\002\000\004\045\313\001\002\000\050\004\uffcd\012\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\035\uffcd\036\uffcd" +
    "\040\uffcd\044\uffcd\045\uffcd\046\uffcd\001\002\000\032\014" +
    "\uffaf\015\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf" +
    "\035\uffaf\036\uffaf\041\uffaf\046\uffaf\050\uffaf\001\002\000" +
    "\006\004\026\033\031\001\002\000\006\046\317\050\073" +
    "\001\002\000\054\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\017\uffe8\021\uffe8\022\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\030\uffe8\031\uffe8\035\uffe8\036\uffe8\040" +
    "\uffe8\044\uffe8\045\uffe8\046\uffe8\001\002\000\020\002\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\001" +
    "\002\000\014\037\033\040\114\042\034\046\uffe4\050\uffe4" +
    "\001\002\000\004\040\323\001\002\000\016\005\016\006" +
    "\012\007\005\011\010\041\uffd7\050\uffd7\001\002\000\006" +
    "\041\325\050\042\001\002\000\006\044\ufff6\046\ufff6\001" +
    "\002\000\004\005\330\001\002\000\006\004\uffd6\033\uffd6" +
    "\001\002\000\006\004\uffd4\033\uffd4\001\002\000\004\002" +
    "\001\001\002\000\016\004\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\001\002\000\006\004\uffd5\033\uffd5\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\030\002\006\003\014\004\010\005\012\006" +
    "\016\007\013\031\017\032\021\033\020\037\005\040\003" +
    "\001\001\000\012\005\105\006\106\007\013\037\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\041\027\042\315\045\320\001\001\000" +
    "\002\001\001\000\022\004\010\005\012\006\016\007\013" +
    "\031\017\032\103\037\005\040\102\001\001\000\002\001" +
    "\001\000\006\006\024\007\023\001\001\000\002\001\001" +
    "\000\010\041\027\042\026\045\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\036\007\035\043\040\044\037\001\001" +
    "\000\002\001\001\000\004\045\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\036\043\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\030\054\050\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\041\074" +
    "\045\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\036\007\035" +
    "\043\040\044\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\105\006\106\007\013\037\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\112\001\001\000\006\006\110\007\023\001\001" +
    "\000\004\045\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\036\007\035\043\040\044\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\121\010" +
    "\123\031\117\036\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\041\027\042\315\045\075\001\001\000" +
    "\004\006\314\001\001\000\036\006\121\011\140\012\153" +
    "\013\124\014\144\015\154\016\145\017\150\024\156\031" +
    "\132\034\130\046\157\047\142\051\146\001\001\000\002" +
    "\001\001\000\006\017\150\034\313\001\001\000\002\001" +
    "\001\000\032\011\140\012\153\013\124\014\144\015\154" +
    "\016\145\017\150\024\156\034\130\046\157\047\311\051" +
    "\146\001\001\000\002\001\001\000\006\017\150\034\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\150\034\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\150\034\253\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\150\034\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\011" +
    "\140\012\153\013\124\014\144\015\154\016\145\017\150" +
    "\024\156\034\130\046\244\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\150\034\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\150\024\163\034\130\035\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\150\024\241" +
    "\034\130\001\001\000\012\017\150\022\172\027\167\034" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\150\022\172\027\173\034\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\150\034\213\001\001\000\002\001\001\000" +
    "\006\017\150\034\212\001\001\000\006\017\150\034\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\150\034\210\001\001\000\006\017\150\034\207\001\001" +
    "\000\006\017\150\034\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\150\022\172\027" +
    "\216\034\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\150\024\163\034\130\035\220\001\001\000" +
    "\002\001\001\000\026\011\140\012\153\013\124\014\144" +
    "\015\154\016\145\017\150\024\156\034\130\046\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\230" +
    "\020\227\021\225\052\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\230\021\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\150\034\252\001" +
    "\001\000\006\017\150\034\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\150\022" +
    "\172\027\255\034\170\001\001\000\002\001\001\000\026" +
    "\011\140\012\153\013\124\014\144\015\154\016\145\017" +
    "\150\024\156\034\130\046\257\001\001\000\002\001\001" +
    "\000\026\011\140\012\153\013\124\014\144\015\154\016" +
    "\145\017\150\024\156\034\130\046\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\267\026\266\001\001\000\002\001\001" +
    "\000\006\023\275\026\276\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\011\140\012\153\013\124\014\144" +
    "\015\154\016\145\017\150\024\156\034\130\046\157\047" +
    "\273\051\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\011\140\012\153\013\124\014\144" +
    "\015\154\016\145\017\150\024\156\034\130\046\157\047" +
    "\302\051\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\150\022\172\027\305\034\170\001\001\000" +
    "\002\001\001\000\026\011\140\012\153\013\124\014\144" +
    "\015\154\016\145\017\150\024\156\034\130\046\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\041\027\042" +
    "\026\045\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\036\007\035\043\040\044\323\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= prog_ok 
            { parser.Tree.reduce(1,"PROG",0);
              Object RESULT =null;
		 System.out.println("Program correctly recognized"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog_ok ::= dec_prot_list function_list 
            { parser.Tree.reduce(2,"prog_ok",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog_ok",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog_ok ::= function_list 
            { parser.Tree.reduce(1,"prog_ok",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog_ok",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_prot_list ::= dec_prot_list dec_prot 
            { parser.Tree.reduce(2,"dec_prot_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_prot_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_prot_list ::= dec_prot 
            { parser.Tree.reduce(1,"dec_prot_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_prot_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_prot ::= decl 
            { parser.Tree.reduce(1,"dec_prot",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_prot",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_prot ::= function_prot 
            { parser.Tree.reduce(1,"dec_prot",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec_prot",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function_list ::= function 
            { parser.Tree.reduce(1,"function_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // function_list ::= function_list function 
            { parser.Tree.reduce(2,"function_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function_decl ::= type pointer RBOPEN parameter_list RBCLOSED 
            { parser.Tree.reduce(5,"function_decl",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // function_decl ::= void ID RBOPEN parameter_list RBCLOSED 
            { parser.Tree.reduce(5,"function_decl",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function_decl ::= STORAGE_SPEC type pointer RBOPEN parameter_list RBCLOSED 
            { parser.Tree.reduce(6,"function_decl",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function_decl ::= STORAGE_SPEC void ID RBOPEN parameter_list RBCLOSED 
            { parser.Tree.reduce(6,"function_decl",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function_prot ::= function_decl SEMICOLON 
            { parser.Tree.reduce(2,"function_prot",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_prot",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= function_decl CBOPEN function_body CBCLOSED 
            { parser.Tree.reduce(4,"function",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function_body ::= 
            { parser.Tree.reduce(0,"function_body",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function_body ::= decl_list stmt_list 
            { parser.Tree.reduce(2,"function_body",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parameter_list ::= parameter_list COMMA parameter 
            { parser.Tree.reduce(3,"parameter_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parameter_list ::= parameter 
            { parser.Tree.reduce(1,"parameter_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parameter_list ::= void 
            { parser.Tree.reduce(1,"parameter_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parameter ::= type pointer 
            { parser.Tree.reduce(2,"parameter",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parameter ::= type pointer SBOPEN SBCLOSED 
            { parser.Tree.reduce(4,"parameter",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // decl_list ::= decl 
            { parser.Tree.reduce(1,"decl_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // decl_list ::= decl_list decl 
            { parser.Tree.reduce(2,"decl_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // decl ::= type id_list SEMICOLON 
            { parser.Tree.reduce(3,"decl",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // decl ::= STORAGE_SPEC type id_list SEMICOLON 
            { parser.Tree.reduce(4,"decl",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // id_list ::= id_list COMMA ident 
            { parser.Tree.reduce(3,"id_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // id_list ::= ident 
            { parser.Tree.reduce(1,"id_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ident ::= pointer 
            { parser.Tree.reduce(1,"ident",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ident ::= pointer SBOPEN CONST SBCLOSED 
            { parser.Tree.reduce(4,"ident",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ident ::= pointer EQUALS CONST 
            { parser.Tree.reduce(3,"ident",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ident ::= pointer EQUALS MINUS CONST 
            { parser.Tree.reduce(4,"ident",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ident ::= pointer SBOPEN SBCLOSED EQUALS CBOPEN const_list CBCLOSED 
            { parser.Tree.reduce(7,"ident",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ident ::= pointer SBOPEN SBCLOSED EQUALS CBOPEN string_const_list CBCLOSED 
            { parser.Tree.reduce(7,"ident",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // pointer ::= TIMES pointer 
            { parser.Tree.reduce(2,"pointer",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pointer",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // pointer ::= ID 
            { parser.Tree.reduce(1,"pointer",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pointer",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // const_list ::= const_list COMMA CONST 
            { parser.Tree.reduce(3,"const_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // const_list ::= CONST 
            { parser.Tree.reduce(1,"const_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // string_const_list ::= string_const_list COMMA STRINGCONST 
            { parser.Tree.reduce(3,"string_const_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_const_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // string_const_list ::= STRINGCONST 
            { parser.Tree.reduce(1,"string_const_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_const_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // void ::= VOID 
            { parser.Tree.reduce(1,"void",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("void",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // void ::= 
            { parser.Tree.reduce(0,"void",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("void",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type ::= SIGN_MODIFIER TYPE 
            { parser.Tree.reduce(2,"type",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type ::= LENG_MODIFIER TYPE 
            { parser.Tree.reduce(2,"type",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= SIGN_MODIFIER LENG_MODIFIER TYPE 
            { parser.Tree.reduce(3,"type",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type ::= LENG_MODIFIER 
            { parser.Tree.reduce(1,"type",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type ::= TYPE 
            { parser.Tree.reduce(1,"type",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmt_list ::= stmts 
            { parser.Tree.reduce(1,"stmt_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmt_list ::= 
            { parser.Tree.reduce(0,"stmt_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmts ::= stmts stmt 
            { parser.Tree.reduce(2,"stmts",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmts ::= stmt 
            { parser.Tree.reduce(1,"stmts",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // block ::= CBOPEN stmt_list CBCLOSED 
            { parser.Tree.reduce(3,"block",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt ::= assign_stmt SEMICOLON 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmt ::= if_stmt 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmt ::= while_stmt 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmt ::= block 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmt ::= BREAK SEMICOLON 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmt ::= return_stmt SEMICOLON 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmt ::= for_stmt 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stmt ::= switch_stmt 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stmt ::= SEMICOLON 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assign_stmt ::= ID EQUALS expr 
            { parser.Tree.reduce(3,"assign_stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // assign_stmt ::= ID ASSOP expr 
            { parser.Tree.reduce(3,"assign_stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // assign_stmt ::= expr 
            { parser.Tree.reduce(1,"assign_stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // term ::= ID 
            { parser.Tree.reduce(1,"term",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // term ::= CONST 
            { parser.Tree.reduce(1,"term",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // term ::= ID RBOPEN arg_list RBCLOSED 
            { parser.Tree.reduce(4,"term",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // term ::= ID SBOPEN CONST SBCLOSED 
            { parser.Tree.reduce(4,"term",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // term ::= ID SBOPEN ID SBCLOSED 
            { parser.Tree.reduce(4,"term",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arg_list ::= args 
            { parser.Tree.reduce(1,"arg_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arg_list ::= 
            { parser.Tree.reduce(0,"arg_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // args ::= args COMMA arg 
            { parser.Tree.reduce(3,"args",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // args ::= arg 
            { parser.Tree.reduce(1,"args",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // arg ::= term 
            { parser.Tree.reduce(1,"arg",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // arg ::= STRINGCONST 
            { parser.Tree.reduce(1,"arg",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= expr PLUS expr 
            { parser.Tree.reduce(3,"expr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= expr MINUS expr 
            { parser.Tree.reduce(3,"expr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= expr DIVIDE expr 
            { parser.Tree.reduce(3,"expr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= expr TIMES expr 
            { parser.Tree.reduce(3,"expr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= expr MOD expr 
            { parser.Tree.reduce(3,"expr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= expr INCR 
            { parser.Tree.reduce(2,"expr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= INCR expr 
            { parser.Tree.reduce(2,"expr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= expr DECR 
            { parser.Tree.reduce(2,"expr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= DECR expr 
            { parser.Tree.reduce(2,"expr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= RBOPEN expr RBCLOSED 
            { parser.Tree.reduce(3,"expr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= MINUS expr 
            { parser.Tree.reduce(2,"expr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= PLUS expr 
            { parser.Tree.reduce(2,"expr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= term 
            { parser.Tree.reduce(1,"expr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // if_stmt ::= IF RBOPEN cond RBCLOSED stmt ELSE stmt 
            { parser.Tree.reduce(7,"if_stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // if_stmt ::= IF RBOPEN cond RBCLOSED stmt 
            { parser.Tree.reduce(5,"if_stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cond ::= cond LOGOP cond 
            { parser.Tree.reduce(3,"cond",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cond ::= RBOPEN cond RBCLOSED 
            { parser.Tree.reduce(3,"cond",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cond ::= comparison 
            { parser.Tree.reduce(1,"cond",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cond ::= expr 
            { parser.Tree.reduce(1,"cond",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // comparison ::= expr RELOP expr 
            { parser.Tree.reduce(3,"comparison",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // while_stmt ::= WHILE RBOPEN cond RBCLOSED stmt 
            { parser.Tree.reduce(5,"while_stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // for_stmt ::= FOR RBOPEN expr_list SEMICOLON cond SEMICOLON expr_list RBCLOSED stmt 
            { parser.Tree.reduce(9,"for_stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr_list ::= expr_list COMMA assign_stmt 
            { parser.Tree.reduce(3,"expr_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr_list ::= assign_stmt 
            { parser.Tree.reduce(1,"expr_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // return_stmt ::= RETURN expr 
            { parser.Tree.reduce(2,"return_stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // return_stmt ::= RETURN 
            { parser.Tree.reduce(1,"return_stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // switch_stmt ::= SWITCH RBOPEN ID RBCLOSED CBOPEN case_list CBCLOSED 
            { parser.Tree.reduce(7,"switch_stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // switch_stmt ::= SWITCH RBOPEN ID RBCLOSED CBOPEN case_list default_stmt CBCLOSED 
            { parser.Tree.reduce(8,"switch_stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // case_list ::= case_list case_stmt 
            { parser.Tree.reduce(2,"case_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // case_list ::= case_stmt 
            { parser.Tree.reduce(1,"case_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // case_stmt ::= CASE CONST COLON stmt_list 
            { parser.Tree.reduce(4,"case_stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // default_stmt ::= DEFAULT COLON stmt_list 
            { parser.Tree.reduce(3,"default_stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
