/* The following code was generated by JFlex 1.7.0 */

import java_cup.runtime.*;
import java.lang.reflect.Field;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>MiniC_scanner.jflex</tt>
 */
class MiniC_scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\55\1\55\1\2\22\0\1\3\1\35\1\53"+
    "\1\56\2\0\1\44\1\46\1\35\1\35\1\37\1\36\1\35\1\36"+
    "\1\42\1\40\1\47\11\5\1\0\1\35\1\43\1\41\1\43\2\0"+
    "\4\4\1\50\25\4\1\35\1\54\1\35\1\0\1\52\1\0\1\11"+
    "\1\6\1\13\1\22\1\10\1\23\1\26\1\31\1\20\1\4\1\12"+
    "\1\24\1\25\1\16\1\15\1\33\1\4\1\7\1\14\1\17\1\21"+
    "\1\34\1\30\1\51\1\32\1\27\1\35\1\45\1\35\1\35\6\0"+
    "\1\55\u1fa2\0\1\55\1\55\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\20\3\6\5\1\1"+
    "\1\4\2\1\1\3\1\6\16\3\1\7\2\3\1\7"+
    "\7\3\1\0\1\10\2\0\1\11\4\0\1\3\1\0"+
    "\20\3\1\12\4\3\1\7\7\3\1\0\1\13\2\0"+
    "\1\2\2\0\1\3\1\6\1\0\3\3\1\7\1\3"+
    "\1\14\2\3\1\12\16\3\1\10\2\0\1\2\2\0"+
    "\1\3\1\7\11\3\1\12\4\3\1\15\1\3\2\0"+
    "\1\2\2\0\1\3\1\7\1\3\1\14\1\3\1\12"+
    "\4\3\2\0\3\3\1\7\2\3\1\14\1\7\1\12"+
    "\30\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\57\0\136\0\215\0\274\0\353\0\u011a"+
    "\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292"+
    "\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\57\0\u03db"+
    "\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553"+
    "\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb"+
    "\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843"+
    "\0\u0582\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c"+
    "\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0524\0\57"+
    "\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e"+
    "\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96"+
    "\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0b91\0\u0edf"+
    "\0\u0f0e\0\u0f3d\0\u0f6c\0\u0b91\0\u0f9b\0\u0fca\0\u0ff9\0\u1028"+
    "\0\u1057\0\u1086\0\u10b5\0\u10e4\0\57\0\u1113\0\u1142\0\u1171"+
    "\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u122d\0\u125c\0\u128b\0\u12ba"+
    "\0\u11fe\0\u12e9\0\u11fe\0\u1318\0\u1347\0\u11fe\0\u1376\0\u13a5"+
    "\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d"+
    "\0\u154c\0\u157b\0\u15aa\0\u15d9\0\57\0\u1608\0\u1637\0\u1666"+
    "\0\u1695\0\u16c4\0\u16f3\0\u16f3\0\u1722\0\u1751\0\u1780\0\u17af"+
    "\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a\0\u16f3\0\u18c9\0\u18f8"+
    "\0\u1927\0\u1956\0\u16f3\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\u1a41"+
    "\0\u1a70\0\u1a9f\0\u1a9f\0\u1ace\0\u1a9f\0\u1afd\0\u1a9f\0\u1b2c"+
    "\0\u1b5b\0\u1b8a\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4"+
    "\0\u1c46\0\u1cd3\0\u1d02\0\u1d02\0\u1d02\0\u1d02\0\u1d31\0\u1d60"+
    "\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8"+
    "\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2\0\u2021\0\u2050"+
    "\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b\0\57";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\5\1\13\1\14\2\5\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\5\1\23\1\5\1\24"+
    "\2\5\1\25\1\26\3\27\1\30\1\31\1\32\1\31"+
    "\1\33\1\34\1\35\1\36\3\5\1\37\1\2\1\0"+
    "\1\40\60\0\1\3\61\0\31\41\12\0\4\41\11\0"+
    "\1\6\34\0\1\42\4\0\1\6\13\0\3\41\1\43"+
    "\25\41\12\0\4\41\10\0\4\41\1\44\24\41\12\0"+
    "\4\41\10\0\12\41\1\45\5\41\1\46\10\41\12\0"+
    "\2\41\1\47\1\41\10\0\15\41\1\50\13\41\12\0"+
    "\4\41\10\0\5\41\1\46\3\41\1\51\13\41\1\52"+
    "\3\41\12\0\4\41\10\0\13\41\1\53\1\54\7\41"+
    "\1\55\1\56\3\41\12\0\4\41\10\0\26\41\1\57"+
    "\2\41\12\0\4\41\10\0\12\41\1\60\4\41\1\61"+
    "\11\41\12\0\4\41\10\0\12\41\1\62\16\41\12\0"+
    "\4\41\10\0\4\41\1\63\4\41\1\64\17\41\12\0"+
    "\4\41\10\0\11\41\1\65\6\41\1\66\10\41\12\0"+
    "\4\41\10\0\11\41\1\67\17\41\12\0\4\41\10\0"+
    "\11\41\1\70\17\41\12\0\4\41\10\0\25\41\1\71"+
    "\3\41\12\0\4\41\10\0\3\41\1\72\25\41\12\0"+
    "\4\41\10\0\11\41\1\73\17\41\12\0\4\41\43\0"+
    "\1\74\1\75\57\0\1\27\22\0\1\42\41\0\1\42"+
    "\53\0\1\27\53\0\1\27\3\0\1\27\15\0\1\76"+
    "\1\0\27\76\13\0\2\76\47\0\1\42\14\0\53\77"+
    "\1\100\3\77\10\0\1\101\7\0\1\102\1\103\1\104"+
    "\40\0\31\105\12\0\4\105\11\0\1\42\2\0\1\106"+
    "\36\0\1\42\1\106\12\0\4\105\1\107\24\105\12\0"+
    "\4\105\10\0\13\105\1\110\6\105\1\111\6\105\12\0"+
    "\4\105\10\0\15\105\1\112\13\105\12\0\4\105\10\0"+
    "\10\105\1\113\20\105\12\0\4\105\10\0\13\105\1\114"+
    "\15\105\12\0\4\105\10\0\13\105\1\115\15\105\12\0"+
    "\4\105\10\0\12\105\1\116\16\105\12\0\4\105\10\0"+
    "\5\105\1\117\23\105\12\0\4\105\10\0\3\105\1\120"+
    "\1\105\1\121\23\105\12\0\4\105\10\0\22\105\1\122"+
    "\1\123\5\105\12\0\4\105\10\0\14\105\1\124\14\105"+
    "\12\0\4\105\10\0\11\105\1\125\17\105\12\0\4\105"+
    "\10\0\27\105\1\126\1\105\12\0\4\105\10\0\13\105"+
    "\1\127\15\105\12\0\4\105\10\0\10\105\1\130\3\105"+
    "\1\131\14\105\12\0\4\105\10\0\17\105\1\132\11\105"+
    "\12\0\4\105\10\0\15\105\1\133\13\105\12\0\4\105"+
    "\10\0\3\105\1\134\25\105\12\0\4\105\10\0\11\105"+
    "\1\135\17\105\12\0\4\105\10\0\12\105\1\136\16\105"+
    "\12\0\4\105\10\0\13\105\1\137\15\105\12\0\4\105"+
    "\10\0\14\105\1\140\14\105\12\0\4\105\10\0\14\105"+
    "\1\141\14\105\12\0\4\105\10\0\14\105\1\142\3\105"+
    "\1\143\10\105\12\0\4\105\4\0\37\74\1\144\17\74"+
    "\1\75\2\0\52\75\1\0\1\75\46\0\1\145\17\0"+
    "\1\146\65\0\1\147\4\0\1\150\51\0\1\151\50\0"+
    "\1\152\52\0\31\153\12\0\4\153\11\0\1\154\30\0"+
    "\1\155\10\0\1\154\13\0\5\153\1\156\23\153\12\0"+
    "\4\153\10\0\15\153\1\157\13\153\12\0\4\153\10\0"+
    "\14\153\1\160\14\153\12\0\4\153\10\0\21\153\1\161"+
    "\7\153\12\0\4\153\10\0\4\153\1\161\24\153\12\0"+
    "\4\153\10\0\4\153\1\162\24\153\12\0\4\153\10\0"+
    "\11\153\1\163\17\153\12\0\4\153\10\0\10\153\1\164"+
    "\2\153\1\165\15\153\12\0\4\153\10\0\3\153\1\166"+
    "\25\153\12\0\4\153\10\0\15\153\1\167\13\153\12\0"+
    "\4\153\10\0\13\153\1\170\15\153\12\0\4\153\10\0"+
    "\12\153\1\171\16\153\12\0\4\153\10\0\4\153\1\172"+
    "\24\153\12\0\4\153\10\0\13\153\1\173\15\153\12\0"+
    "\4\153\10\0\3\153\1\174\25\153\12\0\4\153\10\0"+
    "\4\153\1\175\24\153\12\0\4\153\10\0\14\153\1\176"+
    "\14\153\12\0\4\153\10\0\11\153\1\177\17\153\12\0"+
    "\4\153\10\0\5\153\1\200\23\153\12\0\4\153\10\0"+
    "\2\153\1\201\26\153\12\0\4\153\10\0\5\153\1\174"+
    "\23\153\12\0\4\153\10\0\22\153\1\166\6\153\12\0"+
    "\4\153\10\0\11\153\1\161\17\153\12\0\4\153\10\0"+
    "\20\153\1\202\10\153\12\0\4\153\10\0\12\153\1\203"+
    "\16\153\12\0\4\153\10\0\16\153\1\166\12\153\12\0"+
    "\4\153\10\0\5\153\1\204\23\153\12\0\4\153\4\0"+
    "\37\74\1\144\1\205\16\74\7\0\1\206\62\0\1\207"+
    "\43\0\1\150\2\0\51\150\1\210\1\0\1\150\22\0"+
    "\1\211\57\0\1\212\37\0\31\213\12\0\4\213\11\0"+
    "\1\154\41\0\1\154\13\0\6\213\1\214\22\213\12\0"+
    "\4\213\10\0\3\213\1\215\25\213\12\0\4\213\10\0"+
    "\10\213\1\216\20\213\12\0\4\213\10\0\3\213\1\217"+
    "\25\213\12\0\4\213\10\0\13\213\1\214\15\213\12\0"+
    "\4\213\10\0\14\213\1\220\14\213\12\0\4\213\10\0"+
    "\7\213\1\221\21\213\12\0\4\213\10\0\14\213\1\222"+
    "\14\213\12\0\4\213\10\0\4\213\1\223\24\213\12\0"+
    "\4\213\10\0\11\213\1\224\17\213\12\0\4\213\10\0"+
    "\7\213\1\225\21\213\12\0\4\213\10\0\13\213\1\226"+
    "\15\213\12\0\4\213\10\0\16\213\1\227\12\213\12\0"+
    "\4\213\10\0\22\213\1\230\6\213\12\0\4\213\10\0"+
    "\12\213\1\214\16\213\12\0\4\213\10\0\15\213\1\231"+
    "\13\213\12\0\4\213\10\0\20\213\1\232\10\213\12\0"+
    "\4\213\10\0\4\213\1\214\24\213\12\0\4\213\10\0"+
    "\13\213\1\233\15\213\12\0\4\213\10\0\13\213\1\234"+
    "\15\213\12\0\4\213\21\0\1\235\65\0\1\236\32\0"+
    "\2\150\1\237\51\150\1\210\1\0\1\150\10\0\1\240"+
    "\66\0\1\241\42\0\31\242\12\0\4\242\10\0\12\242"+
    "\1\243\16\242\12\0\4\242\10\0\13\242\1\244\15\242"+
    "\12\0\4\242\10\0\12\242\1\245\16\242\12\0\4\242"+
    "\10\0\12\242\1\246\16\242\12\0\4\242\10\0\13\242"+
    "\1\243\15\242\12\0\4\242\10\0\7\242\1\245\21\242"+
    "\12\0\4\242\10\0\16\242\1\247\12\242\12\0\4\242"+
    "\10\0\17\242\1\243\11\242\12\0\4\242\10\0\25\242"+
    "\1\243\3\242\12\0\4\242\10\0\4\242\1\250\24\242"+
    "\12\0\4\242\10\0\12\242\1\251\16\242\12\0\4\242"+
    "\10\0\20\242\1\252\10\242\12\0\4\242\10\0\4\242"+
    "\1\247\24\242\12\0\4\242\10\0\14\242\1\253\14\242"+
    "\12\0\4\242\13\0\1\150\70\0\1\254\35\0\2\150"+
    "\1\0\51\150\1\210\1\0\1\150\23\0\1\150\51\0"+
    "\1\255\44\0\31\256\12\0\4\256\10\0\4\256\1\257"+
    "\24\256\12\0\4\256\10\0\15\256\1\260\13\256\12\0"+
    "\4\256\10\0\17\256\1\261\11\256\12\0\4\256\10\0"+
    "\4\256\1\262\24\256\12\0\4\256\10\0\13\256\1\261"+
    "\15\256\12\0\4\256\10\0\20\256\1\260\10\256\12\0"+
    "\4\256\26\0\1\255\44\0\1\150\52\0\31\263\12\0"+
    "\4\263\10\0\3\263\1\264\25\263\12\0\4\263\10\0"+
    "\4\263\1\265\24\263\12\0\4\263\10\0\16\263\1\266"+
    "\12\263\12\0\4\263\10\0\31\267\12\0\4\267\10\0"+
    "\31\270\12\0\4\270\10\0\31\271\12\0\4\271\10\0"+
    "\31\272\12\0\4\272\10\0\31\273\12\0\4\273\10\0"+
    "\31\274\12\0\4\274\10\0\31\275\12\0\4\275\10\0"+
    "\31\276\12\0\4\276\10\0\31\277\12\0\4\277\10\0"+
    "\31\300\12\0\4\300\10\0\31\301\12\0\4\301\10\0"+
    "\31\302\12\0\4\302\10\0\31\303\12\0\4\303\10\0"+
    "\31\304\12\0\4\304\10\0\31\305\12\0\4\305\10\0"+
    "\31\306\12\0\4\306\10\0\31\307\12\0\4\307\10\0"+
    "\31\310\12\0\4\310\10\0\31\311\12\0\4\311\10\0"+
    "\31\312\12\0\4\312\10\0\31\313\12\0\4\313\10\0"+
    "\31\314\12\0\4\314\10\0\31\315\12\0\4\315\10\0"+
    "\31\316\12\0\4\316\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8554];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\23\1\1\11\44\1\1\0\1\1\2\0"+
    "\1\11\4\0\1\1\1\0\35\1\1\0\1\11\2\0"+
    "\1\1\2\0\2\1\1\0\27\1\1\11\2\0\1\1"+
    "\2\0\22\1\2\0\1\1\2\0\12\1\2\0\40\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	/* To disable debugging, i.e., printing of recogized token by means of the scanner set the constant _DEBUG to false */
	private static final boolean _DEBUG = true;
	
   private Symbol symbol(int type) {
      return new Symbol(type, yyline, yycolumn);
   }
   
   private Symbol symbol(int type, Object value) {
      return new Symbol(type, yyline, yycolumn, value);
   }
   
   private Integer extractSymbol(String in) {
      if(_DEBUG)
         System.out.print(in);
      Field field=null;
      Integer val=null;
      try {
      field = sym.class.getField(in);
      val=(Integer) field.get(null);
      } catch (Exception e) {      
      }
      /*if(val!=null)
         System.out.print(yytext()+" "+val);  */
      return val;
   }
   
   private Symbol symbolFromString(String in) {
      Integer type=extractSymbol(in);
      if(_DEBUG)
         System.out.println();
      return symbol(type);
   }
   
   private Symbol symbolFromString(String in, Object value) {
      Integer type=extractSymbol(in);
      if(_DEBUG)
         System.out.println(":"+value);
      return symbol(type, value);
   }
   


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MiniC_scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print("SCANNER ERROR: "+yytext());
      throw new Error("Illegal character <"+yytext()+">");
            } 
            // fall through
          case 14: break;
          case 2: 
            { /* Directives are discharged by scanner, because usually they are managed by a pre-compiler */
   ;
            } 
            // fall through
          case 15: break;
          case 3: 
            { return symbolFromString("ID",yytext());
            } 
            // fall through
          case 16: break;
          case 4: 
            { return symbolFromString("INT",yytext());
            } 
            // fall through
          case 17: break;
          case 5: 
            { String output=null;
      // {}()[]+-* /=;<> >= <= == &!|, .
      switch(yytext()) {   // Java supports switching on strings
         case "{": 
            output="BO";
            break;
         case "}": 
            output="BC";
            break;
         case "(": 
            output="RO";
            break;
         case ")": 
            output="RC";
            break;
         case "[": 
            output="SO";
            break;
         case "]": 
            output="SC";
            break;
         case "+": 
            output="PLUS";
            break; 
         case "-": 
            output="MINUS";
            break;
         case "*": 
            output="STAR";
            break;
         case "/": 
            output="DIV";
            break;
         case "<": 
            output="MIN";
            break; 
         case ">": 
            output="MAJ";
            break; 
         case "=": 
            output="EQ";
            break;
         case "==": 
            output="EQ_EQ";
            break;
         case "!=":
            output="NOT_EQ";
            break;
         case "<=": 
            output="MIN_EQ";
            break; 
         case ">=": 
            output="MAJ_EQ";
            break;
         case "&": 
            output="BITWISE_AND";
            break;
         case "|": 
            output="BITWISE_OR";
            break;
         case "&&": 
            output="LOGICAL_AND";
            break;
         case "||": 
            output="LOGICAL_OR";
            break;
         case "~":
            output="BITWISE_NOT";
            break;
         case "!": 
            output="LOGICAL_NOT";
            break;
         case ";": 
            output="S";
            break;
         case ",": 
            output="C";
            break;
         case ".":
            output="DOT";
            break;
         default:
            System.out.print("SCANNER ERROR: "+yytext());
            throw new Error("Illegal operator <"+yytext()+">");
      }
      
      return symbolFromString(output);
            } 
            // fall through
          case 18: break;
          case 6: 
            { return symbolFromString("DOUBLE",yytext());
            } 
            // fall through
          case 19: break;
          case 7: 
            { // And this kids, is how you hack the cup library to avoid hardcoding everything.
      String output=yytext().toUpperCase();
      return symbolFromString(output);
            } 
            // fall through
          case 20: break;
          case 8: 
            { //System.out.print(yytext()); 
      ;
            } 
            // fall through
          case 21: break;
          case 9: 
            { return symbolFromString("STRING",yytext());
            } 
            // fall through
          case 22: break;
          case 10: 
            { String output=yytext().toUpperCase()+"_TYPE";
      return symbolFromString(output);
            } 
            // fall through
          case 23: break;
          case 11: 
            { return symbolFromString("CHAR",yytext());
            } 
            // fall through
          case 24: break;
          case 12: 
            { String output=yytext().toUpperCase();
      return symbolFromString(output,yytext());
            } 
            // fall through
          case 25: break;
          case 13: 
            { String output=yytext().toUpperCase();
      return symbolFromString(output);
            } 
            // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
