
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\004\000\002\004" +
    "\003\000\002\004\004\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\005\000" +
    "\002\003\003\000\002\013\004\000\002\005\002\000\002" +
    "\005\004\000\002\006\005\000\002\011\003\000\002\011" +
    "\003\000\002\007\003\000\002\007\005\000\002\010\003" +
    "\000\002\010\004\000\002\012\006\000\002\012\006\000" +
    "\002\012\005\000\002\012\005\000\002\014\006\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\004\000\002\015\005\000\002\015\005\000\002\015" +
    "\004\000\002\015\003\000\002\016\003\000\002\016\003" +
    "\000\002\017\003\000\002\017\003\000\002\020\003\000" +
    "\002\020\003\000\002\021\004\000\002\021\003\000\002" +
    "\022\004\000\002\022\003\000\002\023\005\000\002\024" +
    "\005\000\002\025\005\000\002\025\007\000\002\026\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\020\006\ufff6\007\ufff6\010\ufff6\011\ufff6\015" +
    "\ufff6\044\ufff6\045\ufff6\001\002\000\004\002\150\001\002" +
    "\000\020\006\023\007\025\010\010\011\021\015\022\044" +
    "\016\045\017\001\002\000\022\002\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\012\ufffd\015\ufffd\016\ufffd\001\002\000" +
    "\004\006\023\001\002\000\004\013\047\001\002\000\022" +
    "\002\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\015" +
    "\ufff8\016\ufff8\001\002\000\006\022\136\023\135\001\002" +
    "\000\022\002\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\015\ufffa\016\ufffa\001\002\000\022\002\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\015\ufffb\016\ufffb\001" +
    "\002\000\020\002\uffff\006\uffff\007\uffff\010\uffff\011\uffff" +
    "\015\uffff\016\uffff\001\002\000\004\006\ufff3\001\002\000" +
    "\004\006\ufff2\001\002\000\020\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\015\ufff5\044\ufff5\045\ufff5\001\002\000\004\013" +
    "\047\001\002\000\014\006\023\007\025\010\010\011\021" +
    "\015\022\001\002\000\050\014\uffef\020\033\021\uffef\022" +
    "\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef" +
    "\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037" +
    "\uffef\041\uffef\042\uffef\001\002\000\016\002\000\006\023" +
    "\007\025\010\010\011\021\015\022\001\002\000\004\006" +
    "\023\001\002\000\022\002\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\011\ufffc\012\ufffc\015\ufffc\016\ufffc\001\002\000\004\022" +
    "\030\001\002\000\022\002\uffcc\006\uffcc\007\uffcc\010\uffcc" +
    "\011\uffcc\012\uffcc\015\uffcc\016\uffcc\001\002\000\020\002" +
    "\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\015\ufffe\016\ufffe" +
    "\001\002\000\050\014\uffee\020\040\021\uffee\022\uffee\023" +
    "\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee" +
    "\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\041" +
    "\uffee\042\uffee\001\002\000\006\004\035\006\034\001\002" +
    "\000\004\017\037\001\002\000\004\017\036\001\002\000" +
    "\050\014\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\041\uffeb\042\uffeb" +
    "\001\002\000\050\014\uffea\020\uffea\021\uffea\022\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea" +
    "\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\041" +
    "\uffea\042\uffea\001\002\000\006\004\042\006\041\001\002" +
    "\000\004\017\044\001\002\000\004\017\043\001\002\000" +
    "\050\014\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033" +
    "\uffed\034\uffed\035\uffed\036\uffed\037\uffed\041\uffed\042\uffed" +
    "\001\002\000\050\014\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\041" +
    "\uffec\042\uffec\001\002\000\016\006\023\007\025\010\010" +
    "\011\021\015\022\016\046\001\002\000\022\002\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\015\ufff9\016\ufff9" +
    "\001\002\000\022\004\057\005\067\006\023\013\054\024" +
    "\063\025\056\040\071\043\066\001\002\000\014\006\023" +
    "\007\025\010\010\011\021\015\022\001\002\000\022\002" +
    "\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\052\015\uffca" +
    "\016\uffca\001\002\000\014\006\023\007\025\010\010\011" +
    "\021\015\022\001\002\000\022\002\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\011\uffc9\012\uffc9\015\uffc9\016\uffc9\001\002\000" +
    "\022\004\057\005\067\006\023\013\054\024\063\025\056" +
    "\040\071\043\066\001\002\000\042\014\uffd3\022\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\041\uffd3\042" +
    "\uffd3\001\002\000\006\004\uffd1\005\uffd1\001\002\000\042" +
    "\014\uffcf\022\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\037\uffcf\041\uffcf\042\uffcf\001\002\000\042\014\uffd6\022" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\041" +
    "\uffd6\042\uffd6\001\002\000\042\014\uffd5\022\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\041\uffd5\042\uffd5" +
    "\001\002\000\042\014\uffd4\022\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\041\uffd4\042\uffd4\001\002\000" +
    "\006\004\uffd2\005\uffd2\001\002\000\040\014\132\024\100" +
    "\025\073\026\077\027\102\030\106\031\105\032\074\033" +
    "\104\034\110\035\076\036\075\037\107\041\103\042\101" +
    "\001\002\000\006\004\131\005\130\001\002\000\022\004" +
    "\057\005\067\006\023\013\054\024\063\025\056\040\071" +
    "\043\066\001\002\000\042\014\uffcd\022\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\041\uffcd\042\uffcd\001" +
    "\002\000\042\014\uffd7\022\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\041\uffd7\042\uffd7\001\002\000\022" +
    "\004\057\005\067\006\023\013\054\024\063\025\056\040" +
    "\071\043\066\001\002\000\042\014\uffdb\022\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\041\uffdb\042\uffdb" +
    "\001\002\000\022\004\057\005\067\006\023\013\054\024" +
    "\063\025\056\040\071\043\066\001\002\000\022\004\057" +
    "\005\067\006\023\013\054\024\063\025\056\040\071\043" +
    "\066\001\002\000\022\004\057\005\067\006\023\013\054" +
    "\024\063\025\056\040\071\043\066\001\002\000\022\004" +
    "\057\005\067\006\023\013\054\024\063\025\056\040\071" +
    "\043\066\001\002\000\022\004\057\005\067\006\023\013" +
    "\054\024\063\025\056\040\071\043\066\001\002\000\022" +
    "\004\057\005\067\006\023\013\054\024\063\025\056\040" +
    "\071\043\066\001\002\000\022\004\057\005\067\006\023" +
    "\013\054\024\063\025\056\040\071\043\066\001\002\000" +
    "\022\004\057\005\067\006\023\013\054\024\063\025\056" +
    "\040\071\043\066\001\002\000\022\004\057\005\067\006" +
    "\023\013\054\024\063\025\056\040\071\043\066\001\002" +
    "\000\022\004\057\005\067\006\023\013\054\024\063\025" +
    "\056\040\071\043\066\001\002\000\022\004\057\005\067" +
    "\006\023\013\054\024\063\025\056\040\071\043\066\001" +
    "\002\000\022\004\057\005\067\006\023\013\054\024\063" +
    "\025\056\040\071\043\066\001\002\000\022\004\057\005" +
    "\067\006\023\013\054\024\063\025\056\040\071\043\066" +
    "\001\002\000\022\004\057\005\067\006\023\013\054\024" +
    "\063\025\056\040\071\043\066\001\002\000\042\014\uffe3" +
    "\022\uffe3\024\100\025\073\026\077\027\102\030\106\031" +
    "\105\032\074\033\104\034\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\041\uffe3\042\uffe3\001\002\000\042\014\uffdc\022\uffdc\024" +
    "\100\025\073\026\077\027\102\030\106\031\105\032\074" +
    "\033\104\034\110\035\076\036\075\037\uffdc\041\103\042" +
    "\101\001\002\000\042\014\uffe1\022\uffe1\024\100\025\073" +
    "\026\077\027\102\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\041\uffe1\042\uffe1\001\002" +
    "\000\042\014\uffe0\022\uffe0\024\100\025\073\026\077\027" +
    "\102\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\041\uffe0\042\uffe0\001\002\000\042\014" +
    "\uffde\022\uffde\024\100\025\073\026\077\027\102\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\041\uffde\042\uffde\001\002\000\042\014\uffd9\022\uffd9" +
    "\024\100\025\073\026\077\027\102\030\106\031\105\032" +
    "\074\033\104\034\110\035\076\036\uffd9\037\uffd9\041\uffd9" +
    "\042\uffd9\001\002\000\042\014\uffe5\022\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\037\uffe5\041\uffe5\042\uffe5\001" +
    "\002\000\042\014\uffda\022\uffda\024\100\025\073\026\077" +
    "\027\102\030\106\031\105\032\074\033\104\034\110\035" +
    "\076\036\uffda\037\uffda\041\103\042\uffda\001\002\000\042" +
    "\014\uffe8\022\uffe8\024\uffe8\025\uffe8\026\077\027\102\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\041\uffe8\042\uffe8\001\002\000\042\014\uffe6\022" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\041" +
    "\uffe6\042\uffe6\001\002\000\042\014\uffe2\022\uffe2\024\100" +
    "\025\073\026\077\027\102\030\106\031\105\032\074\033" +
    "\104\034\uffe2\035\uffe2\036\uffe2\037\uffe2\041\uffe2\042\uffe2" +
    "\001\002\000\042\014\uffdd\022\uffdd\024\100\025\073\026" +
    "\077\027\102\030\106\031\105\032\074\033\104\034\110" +
    "\035\076\036\uffdd\037\uffdd\041\103\042\101\001\002\000" +
    "\042\014\uffdf\022\uffdf\024\100\025\073\026\077\027\102" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\041\uffdf\042\uffdf\001\002\000\042\014\uffe7" +
    "\022\uffe7\024\uffe7\025\uffe7\026\077\027\102\030\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\041\uffe7\042\uffe7\001\002\000\042\014\uffd8\022\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\041\uffd8\042" +
    "\uffd8\001\002\000\042\014\uffce\022\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\041\uffce\042\uffce\001\002" +
    "\000\042\014\uffd0\022\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\041\uffd0\042\uffd0\001\002\000\014\006" +
    "\uffc8\007\uffc8\010\uffc8\011\uffc8\015\uffc8\001\002\000\040" +
    "\014\134\024\100\025\073\026\077\027\102\030\106\031" +
    "\105\032\074\033\104\034\110\035\076\036\075\037\107" +
    "\041\103\042\101\001\002\000\042\014\uffe4\022\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\041\uffe4\042" +
    "\uffe4\001\002\000\022\004\057\005\067\006\023\013\054" +
    "\024\063\025\056\040\071\043\066\001\002\000\022\002" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\015\ufff7" +
    "\016\ufff7\001\002\000\040\022\140\024\100\025\073\026" +
    "\077\027\102\030\106\031\105\032\074\033\104\034\110" +
    "\035\076\036\075\037\107\041\103\042\101\001\002\000" +
    "\022\002\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\015\uffe9\016\uffe9\001\002\000\014\006\023\007\025\010" +
    "\010\011\021\015\022\001\002\000\022\002\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\012\uffcb\015\uffcb\016\uffcb\001" +
    "\002\000\006\021\146\022\145\001\002\000\006\021\ufff1" +
    "\022\ufff1\001\002\000\020\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\015\ufff4\044\ufff4\045\ufff4\001\002\000\004\006\023" +
    "\001\002\000\006\021\ufff0\022\ufff0\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\006\002\003\005\004\001\001\000\002\001" +
    "\001\000\026\003\014\004\023\006\017\010\011\011\006" +
    "\013\010\014\005\023\025\024\013\025\012\001\001\000" +
    "\002\001\001\000\006\007\142\010\143\001\001\000\004" +
    "\026\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\047\001\001\000\022\003\014\004\044\010\011\013\010" +
    "\014\005\023\025\024\013\025\012\001\001\000\004\012" +
    "\031\001\001\000\020\003\030\010\011\013\010\014\005" +
    "\023\025\024\013\025\012\001\001\000\004\010\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\030" +
    "\010\011\013\010\014\005\023\025\024\013\025\012\001" +
    "\001\000\002\001\001\000\020\010\057\015\063\016\067" +
    "\017\060\020\064\021\061\022\054\001\001\000\020\003" +
    "\050\010\011\013\010\014\005\023\025\024\013\025\012" +
    "\001\001\000\002\001\001\000\020\003\052\010\011\013" +
    "\010\014\005\023\025\024\013\025\012\001\001\000\002" +
    "\001\001\000\020\010\057\015\132\016\067\017\060\020" +
    "\064\021\061\022\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\057\015\126\016\067\017" +
    "\060\020\064\021\061\022\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\057\015\071\016\067\017" +
    "\060\020\064\021\061\022\054\001\001\000\002\001\001" +
    "\000\020\010\057\015\125\016\067\017\060\020\064\021" +
    "\061\022\054\001\001\000\020\010\057\015\124\016\067" +
    "\017\060\020\064\021\061\022\054\001\001\000\020\010" +
    "\057\015\123\016\067\017\060\020\064\021\061\022\054" +
    "\001\001\000\020\010\057\015\122\016\067\017\060\020" +
    "\064\021\061\022\054\001\001\000\020\010\057\015\121" +
    "\016\067\017\060\020\064\021\061\022\054\001\001\000" +
    "\020\010\057\015\120\016\067\017\060\020\064\021\061" +
    "\022\054\001\001\000\020\010\057\015\117\016\067\017" +
    "\060\020\064\021\061\022\054\001\001\000\020\010\057" +
    "\015\116\016\067\017\060\020\064\021\061\022\054\001" +
    "\001\000\020\010\057\015\115\016\067\017\060\020\064" +
    "\021\061\022\054\001\001\000\020\010\057\015\114\016" +
    "\067\017\060\020\064\021\061\022\054\001\001\000\020" +
    "\010\057\015\113\016\067\017\060\020\064\021\061\022" +
    "\054\001\001\000\020\010\057\015\112\016\067\017\060" +
    "\020\064\021\061\022\054\001\001\000\020\010\057\015" +
    "\111\016\067\017\060\020\064\021\061\022\054\001\001" +
    "\000\020\010\057\015\110\016\067\017\060\020\064\021" +
    "\061\022\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\010\057\015\136" +
    "\016\067\017\060\020\064\021\061\022\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\141\010\011\013\010\014\005\023\025\024\013\025" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\146\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= DeclarationList InstructionList 
            { parser.Tree.reduce(2,"Program",0);
              Object RESULT =null;
		 System.out.println("Program correctly recognized"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // InstructionList ::= Instruction 
            { parser.Tree.reduce(1,"InstructionList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // InstructionList ::= InstructionList Instruction 
            { parser.Tree.reduce(2,"InstructionList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Instruction ::= Assignment 
            { parser.Tree.reduce(1,"Instruction",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Instruction ::= Print 
            { parser.Tree.reduce(1,"Instruction",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Instruction ::= While 
            { parser.Tree.reduce(1,"Instruction",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instruction ::= If 
            { parser.Tree.reduce(1,"Instruction",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instruction ::= BO InstructionList BC 
            { parser.Tree.reduce(3,"Instruction",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instruction ::= PointlessInstruction 
            { parser.Tree.reduce(1,"Instruction",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PointlessInstruction ::= Variable S 
            { parser.Tree.reduce(2,"PointlessInstruction",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PointlessInstruction",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DeclarationList ::= 
            { parser.Tree.reduce(0,"DeclarationList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclarationList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DeclarationList ::= DeclarationList Declaration 
            { parser.Tree.reduce(2,"DeclarationList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclarationList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Declaration ::= Type VariableList S 
            { parser.Tree.reduce(3,"Declaration",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= INT_TYPE 
            { parser.Tree.reduce(1,"Type",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= DOUBLE_TYPE 
            { parser.Tree.reduce(1,"Type",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VariableList ::= Variable 
            { parser.Tree.reduce(1,"VariableList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VariableList ::= VariableList C Variable 
            { parser.Tree.reduce(3,"VariableList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Variable ::= ID 
            { parser.Tree.reduce(1,"Variable",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Variable ::= ID ArraySubscription 
            { parser.Tree.reduce(2,"Variable",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ArraySubscription ::= ArraySubscription SO INT SC 
            { parser.Tree.reduce(4,"ArraySubscription",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArraySubscription",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ArraySubscription ::= ArraySubscription SO ID SC 
            { parser.Tree.reduce(4,"ArraySubscription",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArraySubscription",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ArraySubscription ::= SO INT SC 
            { parser.Tree.reduce(3,"ArraySubscription",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArraySubscription",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ArraySubscription ::= SO ID SC 
            { parser.Tree.reduce(3,"ArraySubscription",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArraySubscription",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Assignment ::= Variable EQ Expression S 
            { parser.Tree.reduce(4,"Assignment",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignment",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expression ::= Expression PLUS Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expression ::= Expression MINUS Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expression ::= Expression STAR Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expression ::= Expression DIV Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expression ::= RO Expression RC 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expression ::= Expression EQ_EQ Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expression ::= Expression NOT_EQ Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expression ::= Expression MIN Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= Expression MAJ Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expression ::= Expression MIN_EQ Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= Expression MAJ_EQ Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= Expression LOGICAL_AND Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression LOGICAL_OR Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= LOGICAL_NOT Expression 
            { parser.Tree.reduce(2,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= Expression BITWISE_OR Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= Expression BITWISE_AND Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= BITWISE_NOT Expression 
            { parser.Tree.reduce(2,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= Term 
            { parser.Tree.reduce(1,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Term ::= Variable 
            { parser.Tree.reduce(1,"Term",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Term ::= Constant 
            { parser.Tree.reduce(1,"Term",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Constant ::= SignedInt 
            { parser.Tree.reduce(1,"Constant",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Constant ::= SignedDouble 
            { parser.Tree.reduce(1,"Constant",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Sign ::= PLUS 
            { parser.Tree.reduce(1,"Sign",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sign",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Sign ::= MINUS 
            { parser.Tree.reduce(1,"Sign",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sign",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SignedInt ::= Sign INT 
            { parser.Tree.reduce(2,"SignedInt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SignedInt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SignedInt ::= INT 
            { parser.Tree.reduce(1,"SignedInt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SignedInt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SignedDouble ::= Sign DOUBLE 
            { parser.Tree.reduce(2,"SignedDouble",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SignedDouble",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SignedDouble ::= DOUBLE 
            { parser.Tree.reduce(1,"SignedDouble",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SignedDouble",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Print ::= PRINT Variable S 
            { parser.Tree.reduce(3,"Print",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Print",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // While ::= WHILE Condition Instruction 
            { parser.Tree.reduce(3,"While",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("While",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // If ::= IF Condition Instruction 
            { parser.Tree.reduce(3,"If",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("If",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // If ::= IF Condition Instruction ELSE Instruction 
            { parser.Tree.reduce(5,"If",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("If",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Condition ::= RO Expression RC 
            { parser.Tree.reduce(3,"Condition",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condition",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
