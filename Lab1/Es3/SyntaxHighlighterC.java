/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>SyntaxHighlighterC.jflex</tt>
 */
class SyntaxHighlighterC {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\1\1\40\1\40\1\2\22\0\1\45\1\0\1\42\1\41"+
    "\6\0\1\44\1\5\1\0\1\5\1\0\1\43\1\6\11\4\7\0"+
    "\32\3\1\0\1\37\2\0\1\3\1\0\1\7\1\13\1\17\1\24"+
    "\1\15\1\25\1\31\1\21\1\23\1\3\1\16\1\26\1\27\1\22"+
    "\1\12\1\35\1\3\1\14\1\20\1\11\1\10\1\36\1\33\1\30"+
    "\1\34\1\32\12\0\1\40\u1fa2\0\1\40\1\40\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\1\1\3\22\1"+
    "\1\4\20\1\2\5\6\1\5\0\1\6\1\7\1\0"+
    "\23\1\1\5\7\1\3\0\1\10\3\0\1\1\1\5"+
    "\21\1\3\0\1\10\1\0\1\11\2\1\1\5\14\1"+
    "\3\0\1\10\1\0\3\1\1\5\4\1\2\0\2\1"+
    "\1\5\3\1\1\5\27\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\46\0\114\0\162\0\230\0\276\0\46"+
    "\0\344\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee"+
    "\0\u0214\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e"+
    "\0\u0344\0\u036a\0\46\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428"+
    "\0\u044e\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558"+
    "\0\u057e\0\u05a4\0\u05ca\0\u0390\0\u05f0\0\u0616\0\u063c\0\u0662"+
    "\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0344"+
    "\0\46\0\u0792\0\u07b8\0\u07de\0\u0804\0\u082a\0\u0850\0\u0876"+
    "\0\u089c\0\u08c2\0\u08e8\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6"+
    "\0\u09cc\0\u09f2\0\u0a18\0\u0a3e\0\u0a64\0\u0a8a\0\u07de\0\u0ab0"+
    "\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e\0\u0b94\0\u0bba\0\u0be0"+
    "\0\u0c06\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e\0\u0cc4\0\u0cc4\0\u0cea"+
    "\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u0da8\0\u0dce\0\u0df4\0\u0e1a"+
    "\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8\0\u0efe\0\u0f24\0\u0f4a"+
    "\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2\0\u1008\0\46\0\u102e\0\u1054"+
    "\0\u102e\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\u1112\0\u1138\0\u115e"+
    "\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242\0\u1268\0\u128e"+
    "\0\u12b4\0\u12da\0\u1300\0\u1326\0\u134c\0\u1300\0\u1372\0\u1398"+
    "\0\u13be\0\u13e4\0\u140a\0\u1430\0\u1456\0\u147c\0\u1456\0\u14a2"+
    "\0\u14c8\0\u14ee\0\u14ee\0\u1514\0\u153a\0\u1560\0\u1586\0\u15ac"+
    "\0\u15d2\0\u15f8\0\u161e\0\u1644\0\u166a\0\u1690\0\u16b6\0\u16dc"+
    "\0\u1702\0\u1728\0\u174e\0\u1774\0\u179a\0\u17c0\0\u17e6\0\u180c"+
    "\0\u1832\0\u1858";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\5\1\14\1\15\1\16\1\5\1\17"+
    "\1\20\2\5\1\21\1\22\1\23\1\24\2\5\1\25"+
    "\1\5\1\26\2\5\1\27\2\2\1\30\1\31\1\32"+
    "\1\2\1\33\47\0\1\3\47\0\2\34\1\0\31\34"+
    "\13\0\1\6\1\0\1\6\45\0\1\10\42\0\2\34"+
    "\1\0\2\34\1\35\26\34\12\0\2\34\1\0\14\34"+
    "\1\36\14\34\12\0\2\34\1\0\26\34\1\37\2\34"+
    "\12\0\2\34\1\0\6\34\1\40\22\34\12\0\2\34"+
    "\1\0\7\34\1\41\21\34\12\0\2\34\1\0\14\34"+
    "\1\42\3\34\1\43\1\34\1\44\6\34\12\0\2\34"+
    "\1\0\1\34\1\43\2\34\1\45\6\34\1\46\15\34"+
    "\12\0\2\34\1\0\3\34\1\47\7\34\1\50\1\34"+
    "\1\51\7\34\1\52\3\34\12\0\2\34\1\0\14\34"+
    "\1\53\2\34\1\54\11\34\12\0\2\34\1\0\4\34"+
    "\1\55\2\34\1\56\21\34\12\0\2\34\1\0\4\34"+
    "\1\57\13\34\1\60\10\34\12\0\2\34\1\0\4\34"+
    "\1\61\24\34\12\0\2\34\1\0\4\34\1\35\24\34"+
    "\12\0\2\34\1\0\13\34\1\62\15\34\12\0\2\34"+
    "\1\0\4\34\1\63\24\34\17\0\1\64\4\0\1\65"+
    "\5\0\1\66\1\67\21\0\42\70\1\71\3\70\43\0"+
    "\1\72\1\73\4\0\2\74\1\0\31\74\12\0\2\74"+
    "\1\0\3\74\1\75\25\74\12\0\2\74\1\0\12\74"+
    "\1\76\2\74\1\77\13\74\12\0\2\74\1\0\27\74"+
    "\1\100\1\74\12\0\2\74\1\0\7\74\1\101\21\74"+
    "\12\0\2\74\1\0\3\74\1\102\17\74\1\103\5\74"+
    "\12\0\2\74\1\0\2\74\1\104\26\74\12\0\2\74"+
    "\1\0\12\74\1\105\16\74\12\0\2\74\1\0\3\74"+
    "\1\106\25\74\12\0\2\74\1\0\14\74\1\107\14\74"+
    "\12\0\2\74\1\0\1\74\1\110\27\74\12\0\2\74"+
    "\1\0\1\74\1\111\4\74\1\112\22\74\12\0\2\74"+
    "\1\0\4\74\1\113\24\74\12\0\2\74\1\0\23\74"+
    "\1\114\1\115\4\74\12\0\2\74\1\0\15\74\1\116"+
    "\13\74\12\0\2\74\1\0\3\74\1\117\25\74\12\0"+
    "\2\74\1\0\2\74\1\120\26\74\12\0\2\74\1\0"+
    "\17\74\1\121\11\74\12\0\2\74\1\0\6\74\1\117"+
    "\22\74\12\0\2\74\1\0\4\74\1\122\24\74\12\0"+
    "\2\74\1\0\14\74\1\123\14\74\12\0\2\74\1\0"+
    "\15\74\1\124\13\74\12\0\2\74\1\0\15\74\1\125"+
    "\2\74\1\126\10\74\31\0\1\127\37\0\1\130\53\0"+
    "\1\131\2\0\1\132\35\0\1\133\30\0\1\72\2\0"+
    "\35\72\1\0\5\72\44\134\1\135\1\134\3\0\2\136"+
    "\1\0\31\136\12\0\2\136\1\0\4\136\1\137\24\136"+
    "\12\0\2\136\1\0\15\136\1\140\13\136\12\0\2\136"+
    "\1\0\4\136\1\141\24\136\12\0\2\136\1\0\7\136"+
    "\1\142\21\136\12\0\2\136\1\0\1\136\1\143\27\136"+
    "\12\0\2\136\1\0\2\136\1\144\26\136\12\0\2\136"+
    "\1\0\15\136\1\145\13\136\12\0\2\136\1\0\21\136"+
    "\1\137\7\136\12\0\2\136\1\0\7\136\1\137\21\136"+
    "\12\0\2\136\1\0\7\136\1\144\21\136\12\0\2\136"+
    "\1\0\3\136\1\146\6\136\1\147\16\136\12\0\2\136"+
    "\1\0\6\136\1\137\22\136\12\0\2\136\1\0\3\136"+
    "\1\150\25\136\12\0\2\136\1\0\2\136\1\151\26\136"+
    "\12\0\2\136\1\0\6\136\1\147\22\136\12\0\2\136"+
    "\1\0\14\136\1\152\14\136\12\0\2\136\1\0\7\136"+
    "\1\153\21\136\12\0\2\136\1\0\3\136\1\154\25\136"+
    "\12\0\2\136\1\0\5\136\1\155\23\136\12\0\2\136"+
    "\1\0\1\136\1\156\27\136\12\0\2\136\1\0\1\136"+
    "\1\147\27\136\12\0\2\136\1\0\23\136\1\137\5\136"+
    "\12\0\2\136\1\0\20\136\1\157\10\136\12\0\2\136"+
    "\1\0\16\136\1\137\12\136\12\0\2\136\1\0\1\136"+
    "\1\160\27\136\33\0\1\161\35\0\1\162\50\0\1\163"+
    "\26\0\1\132\2\0\34\132\1\164\1\0\5\132\25\0"+
    "\1\165\20\0\37\73\1\0\6\73\43\0\1\166\5\0"+
    "\2\167\1\0\31\167\12\0\2\167\1\0\23\167\1\170"+
    "\5\167\12\0\2\167\1\0\14\167\1\171\14\167\12\0"+
    "\2\167\1\0\16\167\1\172\12\167\12\0\2\167\1\0"+
    "\10\167\1\171\20\167\12\0\2\167\1\0\6\167\1\173"+
    "\22\167\12\0\2\167\1\0\12\167\1\174\16\167\12\0"+
    "\2\167\1\0\15\167\1\175\13\167\12\0\2\167\1\0"+
    "\3\167\1\171\25\167\12\0\2\167\1\0\15\167\1\176"+
    "\13\167\12\0\2\167\1\0\11\167\1\177\17\167\12\0"+
    "\2\167\1\0\7\167\1\200\21\167\12\0\2\167\1\0"+
    "\4\167\1\201\24\167\12\0\2\167\1\0\11\167\1\202"+
    "\17\167\12\0\2\167\1\0\20\167\1\203\10\167\12\0"+
    "\2\167\1\0\2\167\1\204\26\167\12\0\2\167\1\0"+
    "\7\167\1\171\21\167\12\0\2\167\1\0\3\167\1\205"+
    "\25\167\24\0\1\206\42\0\1\207\61\0\1\210\17\0"+
    "\2\132\1\211\34\132\1\164\1\0\5\132\23\0\1\212"+
    "\25\0\2\213\1\0\31\213\12\0\2\213\1\0\14\213"+
    "\1\214\14\213\12\0\2\213\1\0\7\213\1\215\21\213"+
    "\12\0\2\213\1\0\14\213\1\216\14\213\12\0\2\213"+
    "\1\0\3\213\1\217\25\213\12\0\2\213\1\0\14\213"+
    "\1\220\14\213\12\0\2\213\1\0\11\213\1\216\17\213"+
    "\12\0\2\213\1\0\3\213\1\216\25\213\12\0\2\213"+
    "\1\0\16\213\1\216\12\213\12\0\2\213\1\0\17\213"+
    "\1\216\11\213\12\0\2\213\1\0\13\213\1\216\15\213"+
    "\12\0\2\213\1\0\7\213\1\216\21\213\12\0\2\213"+
    "\1\0\20\213\1\221\10\213\12\0\2\213\1\0\15\213"+
    "\1\222\13\213\34\0\1\132\34\0\1\132\41\0\1\223"+
    "\35\0\2\132\1\0\34\132\1\164\1\0\5\132\22\0"+
    "\1\224\26\0\2\225\1\0\31\225\12\0\2\225\1\0"+
    "\7\225\1\226\21\225\12\0\2\225\1\0\17\225\1\227"+
    "\11\225\12\0\2\225\1\0\7\225\1\230\21\225\12\0"+
    "\2\225\1\0\2\225\1\231\26\225\12\0\2\225\1\0"+
    "\3\225\1\227\25\225\12\0\2\225\1\0\20\225\1\231"+
    "\10\225\33\0\1\224\36\0\1\132\33\0\2\232\1\0"+
    "\31\232\12\0\2\232\1\0\16\232\1\233\12\232\12\0"+
    "\2\232\1\0\6\232\1\233\22\232\12\0\2\232\1\0"+
    "\7\232\1\233\21\232\12\0\2\234\1\0\31\234\12\0"+
    "\2\235\1\0\31\235\12\0\2\236\1\0\31\236\12\0"+
    "\2\237\1\0\31\237\12\0\2\240\1\0\31\240\12\0"+
    "\2\241\1\0\31\241\12\0\2\242\1\0\31\242\12\0"+
    "\2\243\1\0\31\243\12\0\2\244\1\0\31\244\12\0"+
    "\2\245\1\0\31\245\12\0\2\246\1\0\31\246\12\0"+
    "\2\247\1\0\31\247\12\0\2\250\1\0\31\250\12\0"+
    "\2\251\1\0\31\251\12\0\2\252\1\0\31\252\12\0"+
    "\2\253\1\0\31\253\12\0\2\254\1\0\31\254\12\0"+
    "\2\255\1\0\31\255\12\0\2\256\1\0\31\256\12\0"+
    "\2\257\1\0\31\257\12\0\2\260\1\0\31\260\12\0"+
    "\2\261\1\0\31\261\12\0\2\262\1\0\31\262\12\0"+
    "\2\2\1\0\31\2\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6270];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\22\1\1\11\30\1\5\0"+
    "\1\11\1\1\1\0\33\1\3\0\1\1\3\0\23\1"+
    "\3\0\1\1\1\0\1\11\17\1\3\0\1\1\1\0"+
    "\10\1\2\0\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[178];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SyntaxHighlighterC(java.io.Reader in) {
  String newLine = System.getProperty("line.separator");
System.out.println(String.join(newLine,
"<HTML>",
"<BODY bgcolor=\"#FFFFFF\">",
"<H2>main.c</H2>",
"<CODE>"));
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            } 
            // fall through
          case 10: break;
          case 2: 
            { System.out.println("<BR>");
            } 
            // fall through
          case 11: break;
          case 3: 
            { System.out.print("<FONT COLOR=\"#FF0000\">"+ yytext() +"</FONT>");
            } 
            // fall through
          case 12: break;
          case 4: 
            { System.out.print("&nbsp");
            } 
            // fall through
          case 13: break;
          case 5: 
            { System.out.print("<FONT COLOR=\"#0000FF\">"+ yytext() +"</FONT>");
            } 
            // fall through
          case 14: break;
          case 6: 
            { System.out.print("<FONT COLOR=\"#03E45B\">"+ yytext() +"</FONT>");
            } 
            // fall through
          case 15: break;
          case 7: 
            { System.out.print("<FONT COLOR=\"#ED00ED\">"+ yytext() +"</FONT>");
            } 
            // fall through
          case 16: break;
          case 8: 
            { System.out.print("<FONT COLOR=\"#00FF00\">"+ yytext().replace("<","&lt").replace(">","&gt") +"</FONT>");
            } 
            // fall through
          case 17: break;
          case 9: 
            { System.out.print("<FONT COLOR=\"#C0C0C0\">"+ yytext() +"</FONT>");
            } 
            // fall through
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java SyntaxHighlighterC [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        SyntaxHighlighterC scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new SyntaxHighlighterC(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
