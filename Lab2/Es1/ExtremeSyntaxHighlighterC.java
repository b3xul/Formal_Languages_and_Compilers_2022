/* The following code was generated by JFlex 1.7.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ExtremeSyntaxHighlighterC.jflex</tt>
 */
class ExtremeSyntaxHighlighterC {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\50\1\50\1\2\22\0\1\3\1\42\1\52"+
    "\1\51\2\0\1\42\1\0\1\42\1\42\1\43\1\7\1\42\1\7"+
    "\1\21\1\44\1\6\11\5\1\0\1\42\1\46\1\45\1\46\2\0"+
    "\4\4\1\22\25\4\1\42\1\47\1\42\1\0\1\4\1\0\1\23"+
    "\1\16\1\26\1\13\1\20\1\31\1\34\1\30\1\10\1\4\1\25"+
    "\1\17\1\32\1\11\1\14\1\40\1\4\1\24\1\27\1\12\1\15"+
    "\1\41\1\36\1\33\1\37\1\35\1\42\1\42\1\42\7\0\1\50"+
    "\u1fa2\0\1\50\1\50\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\2\4\1\5\7\3\1\5"+
    "\11\3\2\5\2\1\1\6\1\1\1\6\1\3\1\7"+
    "\1\3\1\10\1\3\1\10\24\3\1\11\1\6\5\0"+
    "\1\12\1\13\4\6\1\3\1\0\1\14\25\3\1\10"+
    "\5\3\1\0\1\2\3\0\5\6\1\3\1\7\1\0"+
    "\6\3\1\10\13\3\1\0\1\2\3\0\4\6\4\3"+
    "\1\10\12\3\1\0\1\2\3\0\4\6\2\3\1\14"+
    "\2\3\1\10\3\3\2\0\2\6\1\3\1\10\4\3"+
    "\1\10\30\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\126\0\201\0\254\0\327\0\u0102"+
    "\0\126\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f"+
    "\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387"+
    "\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df"+
    "\0\u050a\0\u0535\0\u0560\0\u058b\0\u0535\0\u05b6\0\u05e1\0\u060c"+
    "\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764"+
    "\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc"+
    "\0\u08e7\0\u0912\0\u093d\0\126\0\u0968\0\u0993\0\u09be\0\u09e9"+
    "\0\u0a14\0\u0489\0\126\0\126\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0"+
    "\0\u0aeb\0\u0b16\0\u0aeb\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed"+
    "\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45"+
    "\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d"+
    "\0\u0aeb\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca"+
    "\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122"+
    "\0\u114d\0\u1178\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f"+
    "\0\u127a\0\u114d\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c"+
    "\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4"+
    "\0\u14ff\0\u152a\0\u1555\0\u1580\0\u15ab\0\u15d6\0\u1601\0\u162c"+
    "\0\u1657\0\u1682\0\u1601\0\u16ad\0\u16d8\0\u1703\0\u172e\0\u1759"+
    "\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830\0\u185b\0\u1886\0\u18b1"+
    "\0\u18dc\0\u1907\0\u1932\0\u195d\0\u1988\0\u19b3\0\u19de\0\u1a09"+
    "\0\u19de\0\u1a34\0\u1a5f\0\u19de\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b"+
    "\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7\0\u1bb7\0\u1be2\0\u1c0d\0\u1c38"+
    "\0\u1c63\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f\0\u1d3a\0\u1d65"+
    "\0\u1d90\0\u1dbb\0\u1de6\0\u1e11\0\u1e3c\0\u1e67\0\u1e92\0\u1ebd"+
    "\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69\0\u1f94\0\u1fbf\0\u1fea\0\u2015"+
    "\0\u2040\0\126";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\1\7\1\10\1\11"+
    "\1\12\1\6\1\13\1\14\1\6\1\15\1\16\1\17"+
    "\1\20\1\21\1\6\1\22\1\23\1\6\1\24\1\25"+
    "\1\6\1\26\2\6\1\27\1\6\1\30\1\6\1\31"+
    "\1\32\2\11\1\33\1\11\1\34\1\3\1\0\1\35"+
    "\1\36\1\37\1\4\1\5\40\37\1\40\3\37\1\3"+
    "\1\37\1\41\1\37\54\0\1\4\55\0\3\42\1\0"+
    "\11\42\1\0\20\42\16\0\2\7\12\0\1\43\52\0"+
    "\1\43\35\0\3\42\1\0\1\42\1\44\7\42\1\0"+
    "\7\42\1\45\10\42\15\0\3\42\1\0\11\42\1\0"+
    "\15\42\1\46\2\42\15\0\3\42\1\0\4\42\1\47"+
    "\3\42\1\50\1\0\20\42\15\0\3\42\1\0\1\42"+
    "\1\51\7\42\1\0\20\42\15\0\3\42\1\0\11\42"+
    "\1\0\2\42\1\52\15\42\15\0\3\42\1\0\4\42"+
    "\1\53\4\42\1\0\20\42\15\0\3\42\1\0\1\42"+
    "\1\54\5\42\1\55\1\42\1\0\11\42\1\56\6\42"+
    "\16\0\2\43\50\0\3\42\1\0\5\42\1\57\3\42"+
    "\1\0\20\42\15\0\3\42\1\0\10\42\1\60\1\0"+
    "\20\42\15\0\3\42\1\0\4\42\1\61\4\42\1\0"+
    "\1\42\1\55\4\42\1\62\11\42\15\0\3\42\1\0"+
    "\1\63\1\42\1\64\6\42\1\0\6\42\1\65\5\42"+
    "\1\66\3\42\15\0\3\42\1\0\4\42\1\67\2\42"+
    "\1\70\1\42\1\0\20\42\15\0\3\42\1\0\4\42"+
    "\1\57\4\42\1\0\20\42\15\0\3\42\1\0\11\42"+
    "\1\0\6\42\1\71\11\42\15\0\3\42\1\0\11\42"+
    "\1\0\2\42\1\72\15\42\15\0\3\42\1\0\4\42"+
    "\1\73\4\42\1\0\20\42\54\0\1\74\1\75\53\0"+
    "\1\11\15\0\1\76\2\0\1\77\1\0\1\100\2\0"+
    "\1\101\32\0\52\102\1\103\1\37\2\0\40\37\1\0"+
    "\3\37\1\0\3\37\44\0\1\104\6\0\1\37\2\0"+
    "\5\37\1\105\2\37\1\106\1\37\1\107\2\37\1\110"+
    "\22\37\1\0\3\37\1\0\3\37\4\0\3\111\1\0"+
    "\11\111\1\0\20\111\16\0\2\43\11\0\1\112\1\0"+
    "\1\112\34\0\3\111\1\0\2\111\1\113\6\111\1\0"+
    "\20\111\15\0\3\111\1\0\11\111\1\0\16\111\1\114"+
    "\1\111\15\0\3\111\1\0\5\111\1\115\3\111\1\0"+
    "\20\111\15\0\3\111\1\0\11\111\1\0\7\111\1\116"+
    "\10\111\15\0\3\111\1\0\1\117\10\111\1\0\5\111"+
    "\1\120\12\111\15\0\3\111\1\0\10\111\1\121\1\0"+
    "\20\111\15\0\3\111\1\0\1\111\1\122\7\111\1\0"+
    "\20\111\15\0\3\111\1\0\5\111\1\123\3\111\1\0"+
    "\20\111\15\0\3\111\1\0\11\111\1\0\5\111\1\124"+
    "\12\111\15\0\3\111\1\0\2\111\1\125\6\111\1\0"+
    "\20\111\15\0\3\111\1\0\2\111\1\126\6\111\1\0"+
    "\20\111\15\0\3\111\1\0\2\111\1\127\6\111\1\0"+
    "\12\111\1\130\5\111\15\0\3\111\1\0\1\111\1\131"+
    "\7\111\1\0\20\111\15\0\3\111\1\0\11\111\1\0"+
    "\1\111\1\132\16\111\15\0\3\111\1\0\11\111\1\0"+
    "\12\111\1\133\1\134\4\111\15\0\3\111\1\0\11\111"+
    "\1\0\1\111\1\135\1\136\15\111\15\0\3\111\1\0"+
    "\4\111\1\137\4\111\1\0\20\111\15\0\3\111\1\0"+
    "\1\140\10\111\1\0\20\111\15\0\3\111\1\0\11\111"+
    "\1\0\2\111\1\141\15\111\15\0\3\111\1\0\4\111"+
    "\1\142\4\111\1\0\20\111\15\0\3\111\1\0\1\143"+
    "\10\111\1\0\20\111\15\0\3\111\1\0\1\144\10\111"+
    "\1\0\20\111\15\0\3\111\1\0\1\145\6\111\1\146"+
    "\1\111\1\0\20\111\11\0\1\75\2\0\45\75\1\0"+
    "\2\75\11\0\1\147\17\0\1\150\41\0\1\151\43\0"+
    "\1\152\65\0\1\153\26\0\1\37\2\0\6\37\1\154"+
    "\17\37\1\155\11\37\1\0\3\37\1\0\4\37\2\0"+
    "\15\37\1\156\22\37\1\0\3\37\1\0\4\37\2\0"+
    "\6\37\1\157\31\37\1\0\3\37\1\0\4\37\2\0"+
    "\21\37\1\160\16\37\1\0\3\37\1\0\3\37\4\0"+
    "\3\161\1\0\11\161\1\0\20\161\16\0\2\162\1\163"+
    "\47\0\3\161\1\0\10\161\1\164\1\0\20\161\15\0"+
    "\3\161\1\0\6\161\1\165\2\161\1\0\20\161\15\0"+
    "\3\161\1\0\11\161\1\0\1\161\1\166\16\161\15\0"+
    "\3\161\1\0\4\161\1\167\4\161\1\0\20\161\15\0"+
    "\3\161\1\0\1\170\10\161\1\0\20\161\15\0\3\161"+
    "\1\0\11\161\1\0\1\161\1\171\16\161\15\0\3\161"+
    "\1\0\11\161\1\0\12\161\1\172\5\161\15\0\3\161"+
    "\1\0\11\161\1\0\10\161\1\172\7\161\15\0\3\161"+
    "\1\0\10\161\1\172\1\0\20\161\15\0\3\161\1\0"+
    "\10\161\1\173\1\0\20\161\15\0\3\161\1\0\4\161"+
    "\1\172\4\161\1\0\20\161\15\0\3\161\1\0\5\161"+
    "\1\173\3\161\1\0\20\161\15\0\3\161\1\0\1\174"+
    "\10\161\1\0\20\161\15\0\3\161\1\0\2\161\1\175"+
    "\6\161\1\0\5\161\1\176\12\161\15\0\3\161\1\0"+
    "\11\161\1\0\2\161\1\172\15\161\15\0\3\161\1\0"+
    "\1\161\1\177\7\161\1\0\20\161\15\0\3\161\1\0"+
    "\10\161\1\200\1\0\20\161\15\0\3\161\1\0\2\161"+
    "\1\201\6\161\1\0\20\161\15\0\3\161\1\0\5\161"+
    "\1\202\3\161\1\0\20\161\15\0\3\161\1\0\11\161"+
    "\1\0\2\161\1\176\15\161\15\0\3\161\1\0\2\161"+
    "\1\203\6\161\1\0\20\161\15\0\3\161\1\0\11\161"+
    "\1\0\1\161\1\176\16\161\15\0\3\161\1\0\7\161"+
    "\1\204\1\161\1\0\20\161\15\0\3\161\1\0\1\161"+
    "\1\176\7\161\1\0\20\161\15\0\3\161\1\0\3\161"+
    "\1\172\5\161\1\0\20\161\15\0\3\161\1\0\11\161"+
    "\1\0\1\161\1\205\16\161\37\0\1\206\24\0\1\150"+
    "\2\0\44\150\1\207\1\0\2\150\31\0\1\210\34\0"+
    "\1\211\63\0\1\212\26\0\1\37\2\0\23\37\1\213"+
    "\14\37\1\0\3\37\1\0\3\37\1\155\2\0\40\155"+
    "\1\150\3\155\1\207\1\37\2\155\1\37\2\0\26\37"+
    "\1\214\11\37\1\0\3\37\1\0\4\37\2\0\10\37"+
    "\1\215\27\37\1\0\3\37\1\0\4\37\2\0\21\37"+
    "\1\216\16\37\1\0\3\37\1\0\3\37\4\0\3\217"+
    "\1\0\11\217\1\0\20\217\16\0\2\162\50\0\3\217"+
    "\1\0\3\217\1\220\5\217\1\0\20\217\15\0\3\217"+
    "\1\0\7\217\1\221\1\217\1\0\20\217\15\0\3\217"+
    "\1\0\5\217\1\222\3\217\1\0\20\217\15\0\3\217"+
    "\1\0\1\217\1\223\7\217\1\0\20\217\15\0\3\217"+
    "\1\0\11\217\1\0\12\217\1\224\5\217\15\0\3\217"+
    "\1\0\11\217\1\0\3\217\1\223\14\217\15\0\3\217"+
    "\1\0\11\217\1\0\2\217\1\225\15\217\15\0\3\217"+
    "\1\0\11\217\1\0\5\217\1\226\12\217\15\0\3\217"+
    "\1\0\1\227\10\217\1\0\20\217\15\0\3\217\1\0"+
    "\2\217\1\223\6\217\1\0\20\217\15\0\3\217\1\0"+
    "\10\217\1\230\1\0\20\217\15\0\3\217\1\0\4\217"+
    "\1\231\4\217\1\0\20\217\15\0\3\217\1\0\1\232"+
    "\10\217\1\0\20\217\15\0\3\217\1\0\11\217\1\0"+
    "\4\217\1\233\13\217\15\0\3\217\1\0\11\217\1\0"+
    "\4\217\1\234\13\217\15\0\3\217\1\0\10\217\1\223"+
    "\1\0\20\217\15\0\3\217\1\0\2\217\1\235\6\217"+
    "\1\0\20\217\30\0\1\236\33\0\2\150\1\237\44\150"+
    "\1\207\1\0\2\150\10\0\1\240\62\0\1\241\46\0"+
    "\1\242\36\0\1\37\2\0\14\37\1\243\23\37\1\0"+
    "\3\37\1\0\4\37\2\0\5\37\1\244\32\37\1\0"+
    "\3\37\1\0\4\37\2\0\15\37\1\245\22\37\1\0"+
    "\3\37\1\0\4\37\2\0\11\37\1\246\26\37\1\0"+
    "\3\37\1\0\3\37\4\0\3\247\1\0\11\247\1\0"+
    "\20\247\15\0\3\247\1\0\10\247\1\250\1\0\20\247"+
    "\15\0\3\247\1\0\10\247\1\251\1\0\20\247\15\0"+
    "\3\247\1\0\7\247\1\252\1\247\1\0\20\247\15\0"+
    "\3\247\1\0\1\247\1\253\7\247\1\0\20\247\15\0"+
    "\3\247\1\0\1\247\1\254\7\247\1\0\20\247\15\0"+
    "\3\247\1\0\2\247\1\255\6\247\1\0\20\247\15\0"+
    "\3\247\1\0\1\247\1\256\7\247\1\0\20\247\15\0"+
    "\3\247\1\0\3\247\1\254\5\247\1\0\20\247\15\0"+
    "\3\247\1\0\11\247\1\0\7\247\1\254\10\247\15\0"+
    "\3\247\1\0\11\247\1\0\4\247\1\254\13\247\15\0"+
    "\3\247\1\0\2\247\1\254\6\247\1\0\20\247\15\0"+
    "\3\247\1\0\11\247\1\0\6\247\1\254\11\247\15\0"+
    "\3\247\1\0\1\257\10\247\1\0\20\247\26\0\1\260"+
    "\35\0\2\150\1\0\44\150\1\207\1\0\2\150\11\0"+
    "\1\261\72\0\1\150\45\0\1\150\26\0\1\37\2\0"+
    "\12\37\1\262\25\37\1\0\3\37\1\0\4\37\2\0"+
    "\6\37\1\263\31\37\1\0\3\37\1\0\4\37\2\0"+
    "\26\37\1\155\11\37\1\0\3\37\1\0\4\37\2\0"+
    "\21\37\1\155\16\37\1\0\3\37\1\0\3\37\4\0"+
    "\3\264\1\0\11\264\1\0\20\264\15\0\3\264\1\0"+
    "\11\264\1\0\7\264\1\265\10\264\15\0\3\264\1\0"+
    "\2\264\1\265\6\264\1\0\20\264\15\0\3\264\1\0"+
    "\10\264\1\266\1\0\20\264\15\0\3\264\1\0\10\264"+
    "\1\267\1\0\20\264\15\0\3\264\1\0\5\264\1\270"+
    "\3\264\1\0\20\264\15\0\3\264\1\0\7\264\1\270"+
    "\1\264\1\0\20\264\24\0\1\261\57\0\1\150\32\0"+
    "\1\37\2\0\10\37\1\263\27\37\1\0\3\37\1\0"+
    "\4\37\2\0\15\37\1\155\22\37\1\0\3\37\1\0"+
    "\3\37\4\0\3\271\1\0\11\271\1\0\20\271\15\0"+
    "\3\271\1\0\3\271\1\272\5\271\1\0\20\271\15\0"+
    "\3\271\1\0\11\271\1\0\2\271\1\272\15\271\15\0"+
    "\3\271\1\0\10\271\1\272\1\0\20\271\15\0\3\273"+
    "\1\0\11\273\1\0\20\273\15\0\3\274\1\0\11\274"+
    "\1\0\20\274\15\0\3\275\1\0\11\275\1\0\20\275"+
    "\15\0\3\276\1\0\11\276\1\0\20\276\15\0\3\277"+
    "\1\0\11\277\1\0\20\277\15\0\3\300\1\0\11\300"+
    "\1\0\20\300\15\0\3\301\1\0\11\301\1\0\20\301"+
    "\15\0\3\302\1\0\11\302\1\0\20\302\15\0\3\303"+
    "\1\0\11\303\1\0\20\303\15\0\3\304\1\0\11\304"+
    "\1\0\20\304\15\0\3\305\1\0\11\305\1\0\20\305"+
    "\15\0\3\306\1\0\11\306\1\0\20\306\15\0\3\307"+
    "\1\0\11\307\1\0\20\307\15\0\3\310\1\0\11\310"+
    "\1\0\20\310\15\0\3\311\1\0\11\311\1\0\20\311"+
    "\15\0\3\312\1\0\11\312\1\0\20\312\15\0\3\313"+
    "\1\0\11\313\1\0\20\313\15\0\3\314\1\0\11\314"+
    "\1\0\20\314\15\0\3\315\1\0\11\315\1\0\20\315"+
    "\15\0\3\316\1\0\11\316\1\0\20\316\15\0\3\317"+
    "\1\0\11\317\1\0\20\317\15\0\3\320\1\0\11\320"+
    "\1\0\20\320\15\0\3\321\1\0\11\321\1\0\20\321"+
    "\15\0\3\322\1\0\11\322\1\0\20\322\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8299];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\4\1\1\11\62\1\1\11\1\1\5\0"+
    "\2\11\5\1\1\0\34\1\1\0\1\1\3\0\7\1"+
    "\1\0\22\1\1\0\1\1\3\0\23\1\1\0\1\1"+
    "\3\0\15\1\2\0\40\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ExtremeSyntaxHighlighterC(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print("SCANNER ERROR: "+yytext());
            } 
            // fall through
          case 13: break;
          case 2: 
            { ;
            } 
            // fall through
          case 14: break;
          case 3: 
            { System.out.print("ID:"+yytext()+" ");
            } 
            // fall through
          case 15: break;
          case 4: 
            { System.out.print("INT:"+yytext()+" ");
            } 
            // fall through
          case 16: break;
          case 5: 
            { // {}()[]+-*/=;<> >= <= &!|, missing -> .==
      switch(yytext()) {   // Java supports switching on strings
         case "{": 
            System.out.print("BO ");
            break;
         case "}": 
            System.out.print("BC ");
            break;
         case "(": 
            System.out.print("RO ");
            break;
         case ")": 
            System.out.print("RC ");
            break;
         case "[": 
            System.out.print("SO ");
            break;
         case "]": 
            System.out.print("SC ");
            break;
         case "+": 
            System.out.print("PLUS ");
            break; 
         case "-": 
            System.out.print("MINUS ");
            break;
         case "*": 
            System.out.print("STAR ");
            break;
         case "/": 
            System.out.print("DIV ");
            break;
         case "<": 
            System.out.print("MIN ");
            break; 
         case ">": 
            System.out.print("MAJ ");
            break; 
         case "=": 
            System.out.print("EQ ");
            break; 
         case "<=": 
            System.out.print("MIN_EQ ");
            break; 
         case ">=": 
            System.out.print("MAJ_EQ ");
            break;
         case "&": 
            System.out.print("AND ");
            break;
         case "|": 
            System.out.print("OR ");
            break;
         case "!": 
            System.out.print("NOT ");
            break;
         case ";": 
            System.out.print("S ");
            break;
         case ",": 
            System.out.print("C ");
            break;   
         default:
            System.out.print(yytext()+" ");
      }
            } 
            // fall through
          case 17: break;
          case 6: 
            { //System.out.print(yytext()); 
      ;
            } 
            // fall through
          case 18: break;
          case 7: 
            { System.out.print("DOUBLE:"+yytext()+" ");
            } 
            // fall through
          case 19: break;
          case 8: 
            { System.out.print(yytext().toUpperCase()+" ");
            } 
            // fall through
          case 20: break;
          case 9: 
            { yybegin(COMMENT);
      //System.out.print(yytext());
            } 
            // fall through
          case 21: break;
          case 10: 
            { System.out.print(yytext()+" ");
            } 
            // fall through
          case 22: break;
          case 11: 
            { //System.out.print(yytext());      
      yybegin(YYINITIAL);
            } 
            // fall through
          case 23: break;
          case 12: 
            { System.out.print(yytext().toUpperCase()+"_TYPE ");
            } 
            // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
