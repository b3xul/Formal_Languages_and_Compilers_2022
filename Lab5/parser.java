
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\004\000\002\006\005\000\002\006\003\000\002\006" +
    "\003\000\002\007\007\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\003\000\002\010\003\000\002" +
    "\005\005\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\014\004\017\006\004\015\015\022\012\023" +
    "\010\001\002\000\014\004\017\006\004\015\015\022\022" +
    "\023\023\001\002\000\004\020\067\001\002\000\004\002" +
    "\066\001\002\000\016\005\027\006\030\010\026\011\031" +
    "\012\033\020\065\001\002\000\020\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\014\063\020\uffea\001\002\000\016" +
    "\004\ufffe\006\ufffe\015\ufffe\021\ufffe\022\ufffe\023\ufffe\001" +
    "\002\000\020\005\ufff3\006\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\014\061\020\ufff3\001\002\000\024\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\001\002\000\016\005\042\006\043\007\045\010\041\011" +
    "\044\020\060\001\002\000\014\004\017\006\004\015\015" +
    "\022\022\023\023\001\002\000\016\004\017\006\004\015" +
    "\015\021\021\022\012\023\010\001\002\000\024\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\001\002\000\016\004\uffff\006\uffff\015\uffff" +
    "\021\uffff\022\uffff\023\uffff\001\002\000\004\002\000\001" +
    "\002\000\024\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\016\ufff3\017\ufff3\020\ufff3\001\002\000\024\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\016\uffea" +
    "\017\uffea\020\uffea\001\002\000\014\005\042\006\043\007" +
    "\045\010\041\011\044\001\002\000\016\005\027\006\030" +
    "\010\026\011\031\012\033\016\032\001\002\000\014\004" +
    "\017\006\004\015\015\022\022\023\023\001\002\000\014" +
    "\004\017\006\004\015\015\022\022\023\023\001\002\000" +
    "\014\004\017\006\004\015\015\022\022\023\023\001\002" +
    "\000\014\004\017\006\004\015\015\022\022\023\023\001" +
    "\002\000\014\004\017\006\004\015\015\022\022\023\023" +
    "\001\002\000\014\004\017\006\004\015\015\022\022\023" +
    "\023\001\002\000\024\005\ufff6\006\ufff6\007\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\016\ufff6\017\ufff6\020\ufff6\001\002\000" +
    "\016\005\027\006\030\010\026\011\031\012\033\017\036" +
    "\001\002\000\024\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011" +
    "\ufff1\012\ufff1\016\ufff1\017\ufff1\020\ufff1\001\002\000\024" +
    "\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\016" +
    "\uffec\017\uffec\020\uffec\001\002\000\024\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\033\016\ufff7\017\ufff7\020" +
    "\ufff7\001\002\000\014\004\017\006\004\015\015\022\022" +
    "\023\023\001\002\000\014\004\017\006\004\015\015\022" +
    "\022\023\023\001\002\000\014\004\017\006\004\015\015" +
    "\022\022\023\023\001\002\000\014\004\017\006\004\015" +
    "\015\022\022\023\023\001\002\000\014\004\017\006\004" +
    "\015\015\022\022\023\023\001\002\000\024\005\ufff4\006" +
    "\ufff4\007\ufff4\010\041\011\044\012\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\001\002\000\014\005\027\006\030\010\026\011" +
    "\031\012\033\001\002\000\024\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\033\016\uffeb\017\uffeb\020\uffeb\001" +
    "\002\000\024\005\uffef\006\uffef\007\045\010\041\011\044" +
    "\012\uffef\016\uffef\017\uffef\020\uffef\001\002\000\024\005" +
    "\ufff0\006\ufff0\007\045\010\041\011\044\012\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\001\002\000\024\005\uffed\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\012\033\016\uffed\017\uffed\020\uffed" +
    "\001\002\000\024\005\ufff9\006\ufff9\007\ufff9\010\026\011" +
    "\031\012\033\016\ufff9\017\ufff9\020\ufff9\001\002\000\024" +
    "\005\ufffa\006\ufffa\007\ufffa\010\026\011\031\012\033\016" +
    "\ufffa\017\ufffa\020\ufffa\001\002\000\024\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\011\uffee\012\uffee\016\uffee\017\uffee\020" +
    "\uffee\001\002\000\024\005\ufff8\006\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\012\033\016\ufff8\017\ufff8\020\ufff8\001\002\000" +
    "\016\004\ufffc\006\ufffc\015\ufffc\021\ufffc\022\ufffc\023\ufffc" +
    "\001\002\000\014\004\017\006\004\015\015\022\022\023" +
    "\023\001\002\000\016\005\027\006\030\010\026\011\031" +
    "\012\033\020\uffe8\001\002\000\014\004\017\006\004\015" +
    "\015\022\022\023\023\001\002\000\016\005\042\006\043" +
    "\007\045\010\041\011\044\020\uffe7\001\002\000\016\004" +
    "\ufffd\006\ufffd\015\ufffd\021\ufffd\022\ufffd\023\ufffd\001\002" +
    "\000\004\002\001\001\002\000\016\004\ufffb\006\ufffb\015" +
    "\ufffb\021\ufffb\022\ufffb\023\ufffb\001\002\000\024\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\016\ufff5\017" +
    "\ufff5\020\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\020\002\005\003\015\004\010\005\004\006" +
    "\006\007\012\010\013\001\001\000\010\006\067\007\012" +
    "\010\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\024\007\012\010\023\001\001\000\014\004\017\005\004" +
    "\006\006\007\012\010\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\056\007\012\010\055\001\001\000\010\006\054\007\012" +
    "\010\023\001\001\000\010\006\053\007\012\010\023\001" +
    "\001\000\010\006\037\007\012\010\036\001\001\000\010" +
    "\006\034\007\012\010\023\001\001\000\010\006\033\007" +
    "\012\010\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\052\007\012\010\023\001\001\000\010\006\046" +
    "\007\012\010\051\001\001\000\010\006\046\007\012\010" +
    "\050\001\001\000\010\006\047\007\012\010\023\001\001" +
    "\000\010\006\046\007\012\010\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\061\007\012\010\023\001\001\000" +
    "\002\001\001\000\010\006\046\007\012\010\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public Hashtable<String,Object> symbol_table= new Hashtable<String,Object>();

    public static int errors_found=0;
    // Redefinition of error functions
    /* The report_error function, in this program, is called only when
       an error, not managed by the error symbol, is found.
       Indeed, when errors are recognized by the error symbol, the function
       syntax_error (disabled in this program) is called.
       This program is an example of error function redefinition: two new
       functions are developed, pSynError and pSynWarning, used to print
       syntactical errors and warning, respectively. */
    public void report_error(String message, Object info) {
        errors_found++;
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): "+message);
            } else System.err.print(": "+message);
        else System.err.print(": "+message);
    }
    public void syntax_error(Symbol cur_token){}

    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }
    
    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    class MyPair{
    public Double first;
    public Double second;
    
    MyPair(Double first, Double second) {
        this.first = new Double(first);
        this.second = new Double(second);
    }
    
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= InstructionList QUESTION 
            { parser.Tree.reduce(2,"Program",0);
              Object RESULT =null;
		
                if(parser.errors_found > 0 ){
			        System.err.println("ERROR: "+ parser.errors_found +" errors were found in the program");
			        return null; 
                }
		        System.out.println("Program correctly recognized");
		        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // InstructionList ::= InstructionList Instruction 
            { parser.Tree.reduce(2,"InstructionList",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // InstructionList ::= Instruction 
            { parser.Tree.reduce(1,"InstructionList",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Instruction ::= ScalarExpression S 
            { parser.Tree.reduce(2,"Instruction",0);
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double res = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    System.out.println("scalar expression: "+res);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Instruction ::= VectorExpression S 
            { parser.Tree.reduce(2,"Instruction",0);
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MyPair res = (MyPair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    System.out.println("vector expression: ["+res.first+","+res.second+"]");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Instruction ::= Assignment S 
            { parser.Tree.reduce(2,"Instruction",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ScalarExpression ::= ScalarExpression PLUS ScalarExpression 
            { parser.Tree.reduce(3,"ScalarExpression",0);
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1 + n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarExpression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ScalarExpression ::= ScalarExpression MINUS ScalarExpression 
            { parser.Tree.reduce(3,"ScalarExpression",0);
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1 - n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarExpression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ScalarExpression ::= ScalarExpression STAR ScalarExpression 
            { parser.Tree.reduce(3,"ScalarExpression",0);
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1 * n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarExpression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ScalarExpression ::= ScalarExpression DIV ScalarExpression 
            { parser.Tree.reduce(3,"ScalarExpression",0);
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1 / n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarExpression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ScalarExpression ::= ScalarExpression CARET ScalarExpression 
            { parser.Tree.reduce(3,"ScalarExpression",0);
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Math.pow( n1,n2 ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarExpression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ScalarExpression ::= MINUS ScalarExpression 
            { parser.Tree.reduce(2,"ScalarExpression",0);
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = -n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarExpression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ScalarExpression ::= VectorExpression DOT VectorExpression 
            { parser.Tree.reduce(3,"ScalarExpression",0);
              Double RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MyPair v1 = (MyPair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MyPair v2 = (MyPair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v1.first * v2.first + v1.second * v2.second; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarExpression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ScalarExpression ::= SCALAR_VARIABLE 
            { parser.Tree.reduce(1,"ScalarExpression",0);
              Double RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (Double) symbol_table.get(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarExpression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ScalarExpression ::= CONST 
            { parser.Tree.reduce(1,"ScalarExpression",0);
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ScalarExpression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Vector ::= SO ScalarExpression C ScalarExpression SC 
            { parser.Tree.reduce(5,"Vector",0);
              MyPair RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double first = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double second = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MyPair(first,second); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vector",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VectorExpression ::= VectorExpression PLUS VectorExpression 
            { parser.Tree.reduce(3,"VectorExpression",0);
              MyPair RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MyPair v1 = (MyPair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MyPair v2 = (MyPair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MyPair(v1.first + v2.first, v1.second + v2.second); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VectorExpression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VectorExpression ::= VectorExpression MINUS VectorExpression 
            { parser.Tree.reduce(3,"VectorExpression",0);
              MyPair RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MyPair v1 = (MyPair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MyPair v2 = (MyPair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MyPair(v1.first - v2.first, v1.second - v2.second); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VectorExpression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VectorExpression ::= ScalarExpression STAR VectorExpression 
            { parser.Tree.reduce(3,"VectorExpression",0);
              MyPair RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MyPair v2 = (MyPair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MyPair(n1 * v2.first, n1 * v2.second); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VectorExpression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VectorExpression ::= VectorExpression STAR ScalarExpression 
            { parser.Tree.reduce(3,"VectorExpression",0);
              MyPair RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MyPair v1 = (MyPair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MyPair(v1.first * n2, v1.second * n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VectorExpression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VectorExpression ::= ScalarExpression DIV VectorExpression 
            { parser.Tree.reduce(3,"VectorExpression",0);
              MyPair RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MyPair v2 = (MyPair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MyPair(n1 / v2.first, n1 / v2.second); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VectorExpression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VectorExpression ::= VectorExpression DIV ScalarExpression 
            { parser.Tree.reduce(3,"VectorExpression",0);
              MyPair RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MyPair v1 = (MyPair)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MyPair(v1.first / n2, v1.second / n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VectorExpression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VectorExpression ::= VECTOR_VARIABLE 
            { parser.Tree.reduce(1,"VectorExpression",0);
              MyPair RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (MyPair) symbol_table.get(name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VectorExpression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VectorExpression ::= Vector 
            { parser.Tree.reduce(1,"VectorExpression",0);
              MyPair RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MyPair pair = (MyPair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pair; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VectorExpression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Assignment ::= SCALAR_VARIABLE EQ ScalarExpression 
            { parser.Tree.reduce(3,"Assignment",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double res = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        symbol_table.put(name,res);
        System.out.println("assignment: "+res);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignment",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Assignment ::= VECTOR_VARIABLE EQ VectorExpression 
            { parser.Tree.reduce(3,"Assignment",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MyPair res = (MyPair)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        symbol_table.put(name,res);
        System.out.println("assignment: ["+res.first+","+res.second+"]");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignment",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
