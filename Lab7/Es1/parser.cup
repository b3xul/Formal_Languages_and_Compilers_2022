// Setup section
import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/* N.B. pseudo-assembler: expressions can not be used to index a vector */

/* 
• Variable <id>not declared. (Error): when the programmer tries to use a variable that is not declared.
->  Variable a/x[4] can appear in Declaration, Assignment, Expression (Term), Print.
    Declaration: for each Variable in the VariableList (whenever we printed TYPE name) we need to add to our symbol table an entry with:
    | variableName | MySymbol{type, Dim(1 if normal variable, Dim if array[const], Integer.MAX_VALUE if array[var])} |
    
    Assignment, Expression, Print -> if symbol_table.get(variableName)==null -> variable is not declared.
• Array index (<used index>) exceed array Dim (<array Dim>). (Error): when the index used to index an element of an array exceed the array dimension.
->  Only in Assignment, Expression(Term), Print -> check that variable [ i ] i < (symbol_table.get(variable)).Dim

• Operation between int and double, int number casted to double. (Warning): when there is an operation between an integer number and a double number (i.e., 3+2.5).
-> Only in Expression -> check that Expression1.type==Expression2.type

• Assignment of a double value to an int variable. (Warning): when there is an assignment of a double value to a variable declared as integer (i.e., int a; a=3.5;).
-> Only in Assignment -> check that Variable.type==Expression.type

• Assignement of an int value to an double variable. (Warning): when there is an assignment of an integer value to a variable declared as double (i.e., double a; a=3;)

*/
parser code {:
    public static int errors_found=0;
    // Redefinition of error functions
    /* The report_error function, in this program, is called only when
       an error, not managed by the error symbol, is found.
       Indeed, when errors are recognized by the error symbol, the function
       syntax_error (disabled in this program) is called.
       This program is an example of error function redefinition: two new
       functions are developed, pSynError and pSynWarning, used to print
       syntactical errors and warning, respectively. */
    public void report_error(String message, Object info) {
        errors_found++;
        System.err.println("SONO VIVO");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.println(" (linea "+line+", colonna "+column+"): "+message);
            } else System.err.println(message);
        else System.err.println(message);
    }
    public void syntax_error(Symbol cur_token){}

    /* More error management can be added in the action code */
     
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }
    
    /* Return semantic value of symbol in position (position) */
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }
    
    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    
    public int labelNumber=1;
    
    public int genLabel() {
        return labelNumber++;
    }
    
    Hashtable <String, MySymbol> symbol_table= new Hashtable<String,MySymbol>();
    
    public Hashtable <String, Integer> TYPES= new Hashtable<String,Integer>() {{ put("INT", 1); put("DOUBLE", 2); }};;

:};
    
action code {:
     class MyVariable{
        public String name;
        public MySymbol symbol;
        
        MyVariable(String name, MySymbol symbol) {
            this.name = name;
            this.symbol = symbol;
        }
    } 
:};

// Symbols section
terminal Integer INT;
terminal Double DOUBLE;
terminal String ID, PLUS, MINUS, STAR, DIV;
terminal String MIN, MAJ, MIN_EQ, MAJ_EQ, EQ_EQ, NOT_EQ;
terminal String LOGICAL_AND, LOGICAL_OR, LOGICAL_NOT, BITWISE_AND, BITWISE_OR, BITWISE_NOT;
terminal PRINT, WHILE, IF, ELSE;
terminal RO, RC, BO, BC, SC, SO, C, S, EQ;
terminal INT_TYPE, DOUBLE_TYPE;

non terminal MyVariable Term, Variable, Constant, Expression; //Variable=only name+dim; Constant= only dim+type
non terminal String Type, Sign, Condition;
non terminal Integer[] Nt0;
non terminal Integer Nt1, Nt2, SignedInt;
non terminal Double SignedDouble;
non terminal Program, Instruction, InstructionList, DeclarationList, Declaration, VariableList,ArraySubscription, PointlessInstruction;
non terminal Assignment;
non terminal Print, While, If;

// Operator precedence https://en.cppreference.com/w/c/language/operator_precedence
precedence right EQ; /* Lowest priority */
precedence left LOGICAL_OR; 
precedence left LOGICAL_AND;
precedence left BITWISE_OR;
precedence left BITWISE_AND;
precedence left EQ_EQ, NOT_EQ;
precedence left MIN, MAJ, MIN_EQ, MAJ_EQ;
precedence left PLUS, MINUS;
precedence left STAR, DIV;  
precedence right LOGICAL_NOT, BITWISE_NOT; /* Highest priority */

start with Program;

// Rules section
/* Complex version
Program ::= InstructionList {: System.out.println("Program correctly recognized"); :};
InstructionList ::= Instruction |
                    InstructionList Instruction;
Instruction ::= Declaration | Assignment | Print | While | If | BO InstructionList BC | PointlessInstruction; */

/*Easier version*/
Program ::= DeclarationList InstructionList{:
                if(parser.errors_found > 0 ){
			        System.err.println("ERROR: "+ parser.errors_found +" errors were found in the program");
			        return null; 
                }
		        if(errors_found==0)
                    System.out.println("\tEND");
		    :};
InstructionList ::= Instruction |
                    InstructionList Instruction |
                    error Instruction {:
                        // Error in statement: generic statement error
                        parser.report_error("Error in a statement\n",parser.getToken());
                    :};

// With this trick a block of code {instructions} can be seen as a single instruction! Simplifies If and While -> BO InstructionList BC
Instruction ::= Assignment | Print | While | If |
                BO InstructionList BC |
                BO InstructionList error BC {:
                    // Missing ; before }: missing ';' symbol after a statement
                    parser.report_error("Missing ; before }\n",parser.getToken());
                :} |
                BO error BC {:
                    // Missing ; before }: missing ';' symbol after a statement
                    parser.report_error("Missing ; before }\n",parser.getToken());
                :} |
                PointlessInstruction |
                error S {:
                    // Error in statement: generic statement error
                    parser.report_error("Error in a statement\n",parser.getToken());
                :};
                
PointlessInstruction ::= Variable S;

// Declarations like char **a[10], b[2];
DeclarationList ::= /*Empty*/ |
                    DeclarationList Declaration;
Declaration ::= Type VariableList S |
                Type error S {:
                        // Error in declaration: variable declaration error
 			            parser.report_error("Error in a declaration\n",parser.getToken());
                    :};
                
Type ::=    INT_TYPE {: RESULT = "INT"; :} |
            DOUBLE_TYPE {: RESULT = "DOUBLE"; :} ;
VariableList ::=    Variable:myVar {:
                        Integer type=TYPES.get(parser.stack(-1));
                        myVar.symbol.type=type;
                        symbol_table.put(myVar.name,myVar.symbol);
                        if(errors_found==0){
                            System.out.print("\t"+(String) parser.stack(-1) + " ");  // DOUBLE, INT
                            System.out.print(myVar.name); // x[5], i
                            if(myVar.symbol.index!=null)
                                System.out.println("["+myVar.symbol.dim+"]");
                            else
                                System.out.println();
                        }
                    :} |
                    VariableList C {: RESULT = (String) parser.stack(-2); :} Variable:myVar  {:
                        Integer type=TYPES.get(parser.stack(-1));
                        myVar.symbol.type=type;
                        symbol_table.put(myVar.name,myVar.symbol);
                        if(errors_found==0){
                            System.out.print("\t"+(String) parser.stack(-1) + " ");  // DOUBLE, INT
                            System.out.print(myVar.name); // x[5], i
                            if(myVar.symbol.index!=null)
                                System.out.println("["+myVar.symbol.dim+"]");
                            else
                                System.out.println();
                        }
                    :} ; //a,b,c;
Variable ::=    ID:name {:
                    RESULT = new MyVariable(name, new MySymbol(null, 1));
                :} |
                ID:name ArraySubscription:dim {:
                    MySymbol s=null;
                    if(dim instanceof Integer)
                        s=new MySymbol(null,(Integer) dim, dim);
                    else
                        s=new MySymbol(null,Integer.MAX_VALUE, (String) dim);
                            
                    RESULT = new MyVariable(name, s);
                :} ; // a, b[10], c[z], ca[2][3]?

/* In pseudoassembler language only monodimensional arrays can be declared and used */
ArraySubscription ::=   ArraySubscription SO INT SC |
                        ArraySubscription SO ID SC |
                        ArraySubscription error ID SC {:
                            // Error in vector: error accessing a vector, e.g. missing '[' or 
                            parser.report_error("Error in vector: error accessing a vector: missing '['\n",parser.getToken());
                        :} |
                        SO INT:dim SC {: RESULT = dim; /* Integer */ :} |
                        SO ID:var SC {: RESULT = var; /* String */ :} |
                        SO error SC {:
                            // wrong symbol or symbols sequence within the square brackets used for vector element access
                            parser.report_error("Error in vector: wrong symbol or symbols sequence within the square brackets used for vector element access\n",parser.getToken());
                        :};

// .. | ListPointers Variable (d[10][2]);
//ListPointer ::= Pointer () | ListPointer Pointer (***);

// Assignments like j = i + 1;
Assignment ::=  Variable:myVar EQ Expression:expr S {:
                    MySymbol s=symbol_table.get(myVar.name);
                    if((s.type==TYPES.get("INT"))&&(expr.symbol.type==TYPES.get("DOUBLE")))
                        System.out.println("WARNING: Assignment of a double value to an int variable.");
                    else if((s.type==TYPES.get("DOUBLE"))&&(expr.symbol.type==TYPES.get("INT")))
                        System.out.println("WARNING: Assignment of an int value to a double variable.");
                    
                    if(s==null)
                        parser.report_error("ERROR: Variable <"+myVar.name+"> not declared!",parser.getToken());
                    else if(myVar.symbol.index instanceof Integer && myVar.symbol.dim>=s.dim)
                        parser.report_error("ERROR: Array index (<"+myVar.symbol.dim+">) exceed array size (<"+s.dim+">).",parser.getToken());
                    else if(errors_found==0){
                        System.out.println("\tEVAL "+ expr.name+((expr.symbol.index!=null)? ("["+expr.symbol.index+"]") : ("")));  // EVAL -2.0, EVAL pos 0 >
                        System.out.print("\tASS " + myVar.name); // ASS x[0], ASS pos
                        if(myVar.symbol.index!=null && symbol_table.get(myVar.name).dim>=0)
                            System.out.println("["+myVar.symbol.index+"]");
                        else
                            System.out.println();
                    }
                :} |
                error EQ Expression S {:
                            //Error in assignment: assignment error
 			                parser.report_error("Error in an assignment\n",parser.getToken());
                        :} |
                Variable EQ error S {:
                            //Error in expression: mathematical, boolean or comparison expression error
 			                parser.report_error("Error in an expression\n",parser.getToken());
                        :};
                    
Expression ::=
/* ArithmeticOperator */
                Expression:e1 PLUS:op Expression:e2 {:
                    MySymbol s = new MySymbol(e1.symbol.type,1);
                    if(e1.symbol.type!=e2.symbol.type){
                        System.out.println("WARNING: Operation between int and double, int number casted to double.");
                        s.type=TYPES.get("DOUBLE");
                    }

                    RESULT = new MyVariable(e1.name+" "+e2.name+" "+op , s);
                :} |
                Expression:e1 MINUS:op Expression:e2 {:
                    MySymbol s = new MySymbol(e1.symbol.type,1);
                    if(e1.symbol.type!=e2.symbol.type){
                        System.out.println("WARNING: Operation between int and double, int number casted to double.");
                        s.type=TYPES.get("DOUBLE");
                    }
                    RESULT = new MyVariable(e1.name+" "+e2.name+" "+op , s);
                :} |
                Expression:e1 STAR:op Expression:e2 {:
                    MySymbol s = new MySymbol(e1.symbol.type,1);
                    if(e1.symbol.type!=e2.symbol.type){
                        System.out.println("WARNING: Operation between int and double, int number casted to double.");
                        s.type=TYPES.get("DOUBLE");
                    }
                    RESULT = new MyVariable(e1.name+" "+e2.name+" "+op , s);
                :} |
                Expression:e1 DIV:op Expression:e2 {:
                    MySymbol s = new MySymbol(e1.symbol.type,1);
                    if(e1.symbol.type!=e2.symbol.type){
                        System.out.println("WARNING: Operation between int and double, int number casted to double.");
                        s.type=TYPES.get("DOUBLE");
                    }
                    RESULT = new MyVariable(e1.name+" "+e2.name+" "+op , s);
                :} |
                RO Expression RC |
/* ComparisonOperator */
                Expression:e1 EQ_EQ:op Expression:e2 {:
                    MySymbol s = new MySymbol(e1.symbol.type,1);
                    if(e1.symbol.type!=e2.symbol.type){
                        System.out.println("WARNING: Operation between int and double, int number casted to double.");
                        s.type=TYPES.get("DOUBLE");
                    }
                    
                    RESULT = new MyVariable(e1.name+((e1.symbol.index!=null)? ("["+e1.symbol.index+"]") : (""))+" "+e2.name+((e2.symbol.index!=null)? ("["+e2.symbol.index+"]") : (""))+" "+op , s);
                :} |
                Expression:e1 NOT_EQ:op Expression:e2 {:
                    MySymbol s = new MySymbol(e1.symbol.type,1);
                    if(e1.symbol.type!=e2.symbol.type){
                        System.out.println("WARNING: Operation between int and double, int number casted to double.");
                        s.type=TYPES.get("DOUBLE");
                    }
                    
                    RESULT = new MyVariable(e1.name+((e1.symbol.index!=null)? ("["+e1.symbol.index+"]") : (""))+" "+e2.name+((e2.symbol.index!=null)? ("["+e2.symbol.index+"]") : (""))+" "+op , s);
                :} |
                Expression:e1 MIN:op Expression:e2 {:
                    MySymbol s = new MySymbol(e1.symbol.type,1);
                    if(e1.symbol.type!=e2.symbol.type){
                        System.out.println("WARNING: Operation between int and double, int number casted to double.");
                        s.type=TYPES.get("DOUBLE");
                    }
                    
                    RESULT = new MyVariable(e1.name+((e1.symbol.index!=null)? ("["+e1.symbol.index+"]") : (""))+" "+e2.name+((e2.symbol.index!=null)? ("["+e2.symbol.index+"]") : (""))+" "+op , s);
                :} |
                Expression:e1 MAJ:op Expression:e2 {:
                    MySymbol s = new MySymbol(e1.symbol.type,1);
                    if(e1.symbol.type!=e2.symbol.type){
                        System.out.println("WARNING: Operation between int and double, int number casted to double.");
                        s.type=TYPES.get("DOUBLE");
                    }
                    
                    RESULT = new MyVariable(e1.name+((e1.symbol.index!=null)? ("["+e1.symbol.index+"]") : (""))+" "+e2.name+((e2.symbol.index!=null)? ("["+e2.symbol.index+"]") : (""))+" "+op , s);
                :} |
                Expression:e1 MIN_EQ:op Expression:e2 {:
                    MySymbol s = new MySymbol(e1.symbol.type,1);
                    if(e1.symbol.type!=e2.symbol.type){
                        System.out.println("WARNING: Operation between int and double, int number casted to double.");
                        s.type=TYPES.get("DOUBLE");
                    }
                    
                    RESULT = new MyVariable(e1.name+((e1.symbol.index!=null)? ("["+e1.symbol.index+"]") : (""))+" "+e2.name+((e2.symbol.index!=null)? ("["+e2.symbol.index+"]") : (""))+" "+op , s);
                :} |
                Expression:e1 MAJ_EQ:op Expression:e2 {:
                    MySymbol s = new MySymbol(e1.symbol.type,1);
                    if(e1.symbol.type!=e2.symbol.type){
                        System.out.println("WARNING: Operation between int and double, int number casted to double.");
                        s.type=TYPES.get("DOUBLE");
                    }
                    
                    RESULT = new MyVariable(e1.name+((e1.symbol.index!=null)? ("["+e1.symbol.index+"]") : (""))+" "+e2.name+((e2.symbol.index!=null)? ("["+e2.symbol.index+"]") : (""))+" "+op , s);
                :} |
/* LogicalOperator */ 
                Expression:e1 LOGICAL_AND:op Expression:e2 {:
                    MySymbol s = new MySymbol(e1.symbol.type,1);
                    if(e1.symbol.type!=e2.symbol.type){
                        System.out.println("WARNING: Operation between int and double, int number casted to double.");
                        s.type=TYPES.get("DOUBLE");
                    }
                    
                    RESULT = new MyVariable(e1.name+((e1.symbol.index!=null)? ("["+e1.symbol.index+"]") : (""))+" "+e2.name+((e2.symbol.index!=null)? ("["+e2.symbol.index+"]") : (""))+" "+op , s);
                    :} |
                Expression:e1 LOGICAL_OR:op Expression:e2 {:
                    MySymbol s = new MySymbol(e1.symbol.type,1);
                    if(e1.symbol.type!=e2.symbol.type){
                        System.out.println("WARNING: Operation between int and double, int number casted to double.");
                        s.type=TYPES.get("DOUBLE");
                    }
                    
                    RESULT = new MyVariable(e1.name+((e1.symbol.index!=null)? ("["+e1.symbol.index+"]") : (""))+" "+e2.name+((e2.symbol.index!=null)? ("["+e2.symbol.index+"]") : (""))+" "+op , s);
                    :} |
                LOGICAL_NOT:op Expression:e {:
                    RESULT = new MyVariable(e.name+((e.symbol.index!=null)? ("["+e.symbol.index+"]") : (""))+" "+op , e.symbol);
                    :} |
/* BitwiseOperator */
                Expression BITWISE_OR Expression |
                Expression BITWISE_AND Expression |
                BITWISE_NOT Expression |
/* End of Recursion */
                Term:val {: RESULT = val; :} ;

Term ::=    Variable:myVar {:
                MySymbol s=symbol_table.get(myVar.name);
                if(s==null)
                    parser.report_error("ERROR: Variable <"+myVar.name+"> not declared!",parser.getToken());
                else if(myVar.symbol.index instanceof Integer && myVar.symbol.dim>=s.dim)
                    parser.report_error("ERROR:Array index (<"+myVar.symbol.dim+">) exceed array size (<"+s.dim+">).",parser.getToken());
                else{
                    myVar.symbol.type=s.type;
                }
                RESULT = myVar;
            :} |
            Constant:value {: RESULT = value; :};
Constant ::=    SignedInt:val {:
                    RESULT = new MyVariable(String.valueOf(val), new MySymbol( TYPES.get("INT"), 1));
                :} |
                SignedDouble:val {:
                    RESULT = new MyVariable(String.valueOf(val), new MySymbol( TYPES.get("DOUBLE"), 1));
                :};
Sign ::=    PLUS:val {: RESULT = val; :} |
            MINUS:val {: RESULT = val; :};
SignedInt ::=   Sign:sign INT:val {: RESULT = new Integer(sign+val); :}|
                INT:val {: RESULT = val; :};
SignedDouble ::=    Sign:sign DOUBLE:val {: RESULT = new Double(sign+val); :}|
                    DOUBLE:val {: RESULT = val; :};
                    
// Print instruction
Print ::=   PRINT Variable:myVar S {:
                MySymbol s=symbol_table.get(myVar.name);
                if(s==null)
                    parser.report_error("ERROR: Variable <"+myVar.name+"> not declared!",parser.getToken());
                else if(myVar.symbol.index instanceof Integer && myVar.symbol.dim>=s.dim)
                    parser.report_error("ERROR:Array index (<"+myVar.symbol.dim+">) exceed array size (<"+s.dim+">).",parser.getToken());
                else if(errors_found==0){
                    System.out.print("\tPRINT "+myVar.name);
                    if(myVar.symbol.index!=null)
                        System.out.println("["+myVar.symbol.index+"]");
                }
            :} |
            PRINT error S {:
                //Error in 'print' instruction: print instruction error
                parser.report_error("Error in a print\n",parser.getToken());
            :};

// While instruction
While ::=   WHILE Condition Nt0:labels Instruction {:
                if(errors_found==0){
                    System.out.println( "\tGOTO L" +labels[0]); // Label to the WHILE
                    System.out.print( "L"+labels[1]+":"); // Label to the first instruction after the while block
                }
            :};
//|WHILE Condition BO InstructionList BC; is included in the definition of Instruction since a block of code can be seen as a single instruction

Nt0 ::= /*Empty*/ {:
            RESULT = new Integer[2];
            RESULT[0] = genLabel(); //labels[0]: Label to the WHILE
            RESULT[1] = genLabel(); //labels[1]: Label to the first instruction after the while block
            if(errors_found==0){
                System.out.print("L"+RESULT[0]+":"); // L1: 
                System.out.print("\tEVAL "+ (String)parser.stack(0));  // EVAL pos 0 >
                System.out.println(" \t\t/* while (line "+ parser.getLine() + ") */"); // /* while (line 18) */
                System.out.println("\tGOTOF L"+RESULT[1]); // GOTOF L2
            }
        :};

If ::=  IF Condition Nt1:labelElse Instruction ELSE Nt2:labelAfter Instruction {:
            if(errors_found==0)
                System.out.print( "L"+labelAfter+":"); // Label to the first instruction after the if block
            /* COMPLETE*/
        :} |
        IF Condition Nt1:labelAfter Instruction {:
            if(errors_found==0)
                System.out.print( "L"+labelAfter+":"); // Label to the first instruction after the if block
        :} |
        IF Condition Nt1:labelElse Instruction error Nt2:labelAfter Instruction {:
            // Fundamental to add labels otherways conflicts!
            
            //Error 'else' expected in 'if' instruction: the keyword else is missing in a if construct
            parser.report_error("Error 'else' expected in 'if' instruction\n",parser.getToken());
        :} ;
        
//|IF Condition BO InstructionList BC; is included in the definition of Instruction since a block of code can be seen as a single instruction
Nt1 ::= /*Empty*/ {:
            RESULT = genLabel(); //label: Label to the first instruction after the if block: label of the Else block
            if(errors_found==0){
                System.out.print("\tEVAL "+ (String)parser.stack(0));  // EVAL x[i] x[j] >
                System.out.println(" \t\t/* if (line "+ parser.getLine() + ") */"); // /* if (line 22) */
                System.out.println("\tGOTOF L"+RESULT); // GOTOF L2
            }
        :};
 
Nt2 ::= /*Empty*/ {:
            RESULT = genLabel(); //label: Label to the first instruction after the else block
            if(errors_found==0){
                System.out.println( "\tGOTO L"+RESULT);
                System.out.print( "L"+parser.stack(-2)+":"); // Label to the first instruction after the if block: label of the Else block
            }
        :};
        
// Condition
Condition ::=   RO Expression:myVar RC {:
                    RESULT=myVar.name;
                :}|
                RO error RC {:
                    //Error in expression: mathematical, boolean or comparison expression error
                    parser.report_error("Error in an if/while expression\n",parser.getToken());
                :} |
                error RC{: 
                    //Error '(' expected in 'if' instruction : if a symbol '(' or ')' misses in a if instruction
                    parser.report_error("Error '(' expected in 'if/while' instruction\n",parser.getToken());
                :} |
                RO error{: 
                    //Error ')' expected in 'if' instruction: if a symbol '(' or ')' misses in a if instruction
                    parser.report_error("Error ')' expected in 'if/while' instruction\n",parser.getToken());
                :};