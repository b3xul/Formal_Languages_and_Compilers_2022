
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Vector;
import java.util.Iterator;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\002\004\000\002\002\002\000\002\002" +
    "\005\000\002\002\005\000\002\003\004\000\002\004\003" +
    "\000\002\011\002\000\002\005\003\000\002\005\006\000" +
    "\002\006\005\000\002\007\002\000\002\007\004\000\002" +
    "\010\002\000\002\010\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\010\002\000\003\000\006\000\001\002\000" +
    "\010\002\007\003\005\006\011\001\002\000\004\012\027" +
    "\001\002\000\006\005\ufff7\007\ufff7\001\002\000\004\002" +
    "\001\001\002\000\004\012\012\001\002\000\006\005\ufffc" +
    "\007\ufffc\001\002\000\010\002\uffff\003\uffff\006\uffff\001" +
    "\002\000\006\012\ufffa\013\ufffa\001\002\000\006\005\021" +
    "\007\022\001\002\000\006\012\ufffd\013\016\001\002\000" +
    "\006\005\ufffb\007\ufffb\001\002\000\006\005\ufff7\007\ufff7" +
    "\001\002\000\006\012\ufff9\013\ufff9\001\002\000\010\010" +
    "\ufff5\012\ufff5\013\ufff5\001\002\000\006\005\ufff6\007\ufff6" +
    "\001\002\000\010\010\024\012\ufff8\013\ufff8\001\002\000" +
    "\004\004\025\001\002\000\004\011\026\001\002\000\010" +
    "\010\ufff4\012\ufff4\013\ufff4\001\002\000\010\002\ufffe\003" +
    "\ufffe\006\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\025\000\004\002\003\001\001\000\006\003\007\004" +
    "\005\001\001\000\002\001\001\000\010\005\014\006\012" +
    "\007\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\016\001\001\000" +
    "\006\006\017\007\013\001\001\000\002\001\001\000\004" +
    "\010\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    type_table = new HashMap<String,te_node>();
    var_table = new HashMap<String,var_info>();
    type_table.put ("int", te_node.te_make_base(1));
    type_table.put ("float", te_node.te_make_base(2));
    type_table.put ("char", te_node.te_make_base(3));
    type_table.put ("double", te_node.te_make_base(4));

    }


    // Hash table to store types declared in the program
    public static HashMap<String,te_node> type_table;
    // Hash table in cui vengono memorizzati i nomi degli identificatori e dei relativi tipi
    public static HashMap<String,var_info> var_table;


    public class var_info{
    	String name;
    	te_node type;
    }

    // Given a type name, return type expression
    public static te_node type_lookup(String name){
	te_node rv = (te_node)type_table.get(name);
	return rv;
    }


    // Add a new entry in the symbol table
    int add_var(String name,te_node type)
    {
	var_info vip = new var_info();
	System.out.print("var " + name + ":");
	te_node.te_print(type);
	System.out.print("\n");
	
        vip.name=name;
	vip.type=type;
	if ((var_table.put(name,vip))!=null)
	    return 1;
	return 0;
    }

    // Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Decll EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		te_node start_val = (te_node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Decll ::= 
            {
              te_node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decll",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decll ::= Decll Decl S 
            {
              te_node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decll",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decll ::= Decll error S 
            {
              te_node RESULT =null;
		 parser.report_error("Error in declaration",null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decll",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= T Vlist 
            {
              te_node RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // T ::= TYPE 
            {
              te_node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		te_node a = (te_node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		RESULT=a; 
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT0 ::= 
            {
              te_node RESULT =null;
		
	RESULT=(te_node)parser.stack(-1);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT0",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Vlist ::= V 
            {
              te_node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		te_node v = (te_node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Vlist ::= Vlist CM NT0 V 
            {
              te_node RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		te_node vl = (te_node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT=vl;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // V ::= Ptr ID Ary 
            {
              te_node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		te_node a = (te_node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				parser.add_var(i,a); 
				RESULT=(te_node)parser.stack(-3); 
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("V",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Ptr ::= 
            {
              te_node RESULT =null;
		 
		RESULT=(te_node)parser.stack(0);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ptr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Ptr ::= Ptr TIMES 
            {
              te_node RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		te_node p = (te_node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			
		RESULT=te_node.te_make_pointer(p); 
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ptr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Ary ::= 
            {
              te_node RESULT =null;
		 
		RESULT=(te_node)parser.stack(-1);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ary",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Ary ::= Ary SO NUM SC 
            {
              te_node RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		te_node a = (te_node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
		RESULT=te_node.te_make_array(n.intValue(),a); 
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ary",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
