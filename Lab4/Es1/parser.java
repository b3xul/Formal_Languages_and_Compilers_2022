
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\002\005\000\002\003" +
    "\002\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\005\005\000\002\005\005\000\002\010\003\000" +
    "\002\010\005\000\002\011\005\000\002\011\003\000\002" +
    "\012\003\000\002\012\005\000\002\013\003\000\002\013" +
    "\003\000\002\006\006\000\002\006\006\000\002\007\004" +
    "\000\002\007\004\000\002\014\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\045\000\010\003\uffff\004\uffff\012\uffff\001\002\000" +
    "\004\002\047\001\002\000\010\003\016\004\011\012\015" +
    "\001\002\000\006\005\043\007\044\001\002\000\012\002" +
    "\ufffc\003\ufffc\004\ufffc\012\ufffc\001\002\000\006\012\015" +
    "\013\037\001\002\000\006\003\030\012\015\001\002\000" +
    "\012\002\ufffe\003\ufffe\004\ufffe\012\ufffe\001\002\000\010" +
    "\002\uffff\003\uffff\012\uffff\001\002\000\012\002\ufffd\003" +
    "\ufffd\004\ufffd\012\ufffd\001\002\000\014\005\ufff6\006\ufff6" +
    "\007\ufff6\010\026\011\ufff6\001\002\000\006\005\017\007" +
    "\020\001\002\000\004\012\015\001\002\000\012\002\uffee" +
    "\003\uffee\004\uffee\012\uffee\001\002\000\006\006\ufff9\007" +
    "\ufff9\001\002\000\006\006\023\007\024\001\002\000\004" +
    "\012\015\001\002\000\012\002\ufff0\003\ufff0\004\ufff0\012" +
    "\ufff0\001\002\000\006\006\ufff8\007\ufff8\001\002\000\006" +
    "\012\uffed\013\uffed\001\002\000\010\002\000\003\016\012" +
    "\015\001\002\000\004\007\033\001\002\000\006\006\023" +
    "\007\032\001\002\000\010\002\ufffb\003\ufffb\012\ufffb\001" +
    "\002\000\010\002\ufffa\003\ufffa\012\ufffa\001\002\000\006" +
    "\006\ufff3\011\ufff3\001\002\000\006\006\040\011\041\001" +
    "\002\000\006\006\ufff5\011\ufff5\001\002\000\006\006\ufff2" +
    "\011\ufff2\001\002\000\006\012\015\013\037\001\002\000" +
    "\012\005\ufff7\006\ufff7\007\ufff7\011\ufff7\001\002\000\006" +
    "\006\ufff4\011\ufff4\001\002\000\004\012\015\001\002\000" +
    "\012\002\uffef\003\uffef\004\uffef\012\uffef\001\002\000\006" +
    "\006\023\007\046\001\002\000\012\002\ufff1\003\ufff1\004" +
    "\ufff1\012\ufff1\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\045\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\016\004\011\005\012\006\006\007\013\011\005" +
    "\014\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\033\012\034\013\035\014\007\001\001\000\010" +
    "\010\030\011\020\014\007\001\001\000\002\001\001\000" +
    "\004\003\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\021\011\020\014\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\024\014\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\011\006\006" +
    "\007\013\011\005\014\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\033\013\041\014\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\044\011\020\014" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public static int facts=0;
    public static int error_found=0;
    // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): "+message);
            } else System.err.print(": "+message);
        else System.err.print(": "+message);
    }
    public void syntax_error(Symbol cur_token){}

    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }
    
    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= InstructionList Interrogation InstructionList 
            { parser.Tree.reduce(3,"Program",0);
              Object RESULT =null;
		
		if(parser.facts == 0){
			System.err.println("ERROR: At least 1 facts must be present!");
			return null; 
        }
        else if(parser.error_found > 0 ){
			System.err.println("ERROR: Errors were found in the program");
			return null; 
        }
		System.out.println("Program correctly recognized");
		

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // InstructionList ::= 
            { parser.Tree.reduce(0,"InstructionList",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // InstructionList ::= InstructionList Instruction 
            { parser.Tree.reduce(2,"InstructionList",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Instruction ::= Fact 
            { parser.Tree.reduce(1,"Instruction",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Instruction ::= Rule 
            { parser.Tree.reduce(1,"Instruction",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Interrogation ::= INTERROGATION_SYMBOL PredicateList DOT 
            { parser.Tree.reduce(3,"Interrogation",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Interrogation",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Interrogation ::= INTERROGATION_SYMBOL error DOT 
            { parser.Tree.reduce(3,"Interrogation",0);
              Object RESULT =null;
		
 			            parser.report_error("Error in an interrogation\n",parser.getToken());
			            parser.error_found++;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Interrogation",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PredicateList ::= Predicate 
            { parser.Tree.reduce(1,"PredicateList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PredicateList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PredicateList ::= PredicateList COMMA Predicate 
            { parser.Tree.reduce(3,"PredicateList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PredicateList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Predicate ::= Functor ArgumentList RC 
            { parser.Tree.reduce(3,"Predicate",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Predicate",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Predicate ::= ATOM 
            { parser.Tree.reduce(1,"Predicate",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Predicate",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ArgumentList ::= Argument 
            { parser.Tree.reduce(1,"ArgumentList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ArgumentList ::= ArgumentList COMMA Argument 
            { parser.Tree.reduce(3,"ArgumentList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Argument ::= Predicate 
            { parser.Tree.reduce(1,"Argument",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Argument",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Argument ::= VARIABLE 
            { parser.Tree.reduce(1,"Argument",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Argument",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Rule ::= Predicate RULE_SYMBOL PredicateList DOT 
            { parser.Tree.reduce(4,"Rule",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Rule",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Rule ::= error RULE_SYMBOL PredicateList DOT 
            { parser.Tree.reduce(4,"Rule",0);
              Object RESULT =null;
		
		        parser.report_error("Error in a rule\n",parser.getToken());
		        parser.error_found++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Rule",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Fact ::= Predicate DOT 
            { parser.Tree.reduce(2,"Fact",0);
              Object RESULT =null;
		 parser.facts++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fact",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Fact ::= error DOT 
            { parser.Tree.reduce(2,"Fact",0);
              Object RESULT =null;
		
                parser.report_error("Error in a fact\n",parser.getToken());
  	            parser.error_found++;
  	        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fact",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Functor ::= ATOM RO 
            { parser.Tree.reduce(2,"Functor",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Functor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
