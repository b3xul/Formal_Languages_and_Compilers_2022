
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\004\000\002\004" +
    "\003\000\002\004\004\000\002\004\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\005\000\002\003\006\000\002\003\005\000\002" +
    "\003\003\000\002\003\004\000\002\013\004\000\002\005" +
    "\002\000\002\005\004\000\002\006\005\000\002\006\005" +
    "\000\002\011\003\000\002\011\003\000\002\007\003\000" +
    "\002\007\005\000\002\010\003\000\002\010\004\000\002" +
    "\012\006\000\002\012\006\000\002\012\006\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\014\006" +
    "\000\002\014\006\000\002\014\006\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\004\000" +
    "\002\015\005\000\002\015\005\000\002\015\004\000\002" +
    "\015\003\000\002\016\003\000\002\016\003\000\002\017" +
    "\003\000\002\017\003\000\002\020\003\000\002\020\003" +
    "\000\002\021\004\000\002\021\003\000\002\022\004\000" +
    "\002\022\003\000\002\023\005\000\002\023\005\000\002" +
    "\024\005\000\002\025\005\000\002\025\007\000\002\025" +
    "\007\000\002\026\005\000\002\026\005\000\002\026\004" +
    "\000\002\026\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\022\003\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\015\ufff2\044\ufff2\045\ufff2\001\002\000\004\002\204" +
    "\001\002\000\022\003\022\006\016\007\021\010\011\011" +
    "\014\015\026\044\023\045\007\001\002\000\022\002\uffff" +
    "\003\uffff\006\uffff\007\uffff\010\uffff\011\uffff\015\uffff\016" +
    "\uffff\001\002\000\006\003\uffed\006\uffed\001\002\000\024" +
    "\002\ufffc\003\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\015\ufffc\016\ufffc\001\002\000\006\003\165\013\166" +
    "\001\002\000\024\002\ufff5\003\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\015\ufff5\016\ufff5\001\002\000\022" +
    "\003\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\015\ufff1\044" +
    "\ufff1\045\ufff1\001\002\000\006\003\165\013\166\001\002" +
    "\000\024\002\ufffb\003\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\ufffb\015\ufffb\016\ufffb\001\002\000\050\014\uffea" +
    "\020\146\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\035\uffea\036\uffea\037\uffea\041\uffea\042\uffea\001\002\000" +
    "\006\003\137\006\016\001\002\000\024\002\ufff9\003\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\015\ufff9\016" +
    "\ufff9\001\002\000\006\003\132\006\016\001\002\000\022" +
    "\003\036\006\016\007\021\010\011\011\014\015\026\022" +
    "\034\023\035\001\002\000\006\003\uffee\006\uffee\001\002" +
    "\000\006\022\125\023\124\001\002\000\020\002\000\003" +
    "\036\006\016\007\021\010\011\011\014\015\026\001\002" +
    "\000\016\003\031\006\016\007\021\010\011\011\014\015" +
    "\026\001\002\000\024\002\ufffa\003\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\015\ufffa\016\ufffa\001\002\000" +
    "\020\003\122\006\016\007\021\010\011\011\014\015\026" +
    "\016\120\001\002\000\024\003\036\006\016\007\021\010" +
    "\011\011\014\015\026\016\032\022\034\023\035\001\002" +
    "\000\024\002\ufff6\003\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\015\ufff6\016\ufff6\001\002\000\022\002\ufffd" +
    "\003\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\015\ufffd\016" +
    "\ufffd\001\002\000\024\002\ufff4\003\ufff4\006\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\015\ufff4\016\ufff4\001\002\000" +
    "\022\004\042\005\050\006\016\013\037\024\046\025\040" +
    "\040\054\043\052\001\002\000\006\022\034\023\035\001" +
    "\002\000\022\004\042\005\050\006\016\013\037\024\046" +
    "\025\040\040\054\043\052\001\002\000\006\004\uffc8\005" +
    "\uffc8\001\002\000\042\014\uffca\022\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\041\uffca\042\uffca\001\002" +
    "\000\042\014\uffc6\022\uffc6\024\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\041\uffc6\042\uffc6\001\002\000\042\014" +
    "\uffcd\022\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\041\uffcd\042\uffcd\001\002\000\042\014\uffcb\022\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\041\uffcb" +
    "\042\uffcb\001\002\000\042\014\uffcc\022\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\041\uffcc\042\uffcc\001" +
    "\002\000\006\004\uffc9\005\uffc9\001\002\000\040\022\115" +
    "\024\063\025\056\026\062\027\065\030\072\031\070\032" +
    "\057\033\067\034\073\035\061\036\060\037\071\041\066" +
    "\042\064\001\002\000\042\014\uffc4\022\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\041\uffc4\042\uffc4\001" +
    "\002\000\006\004\114\005\113\001\002\000\022\004\042" +
    "\005\050\006\016\013\037\024\046\025\040\040\054\043" +
    "\052\001\002\000\042\014\uffce\022\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\041\uffce\042\uffce\001\002" +
    "\000\022\004\042\005\050\006\016\013\037\024\046\025" +
    "\040\040\054\043\052\001\002\000\042\014\uffd2\022\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\041\uffd2" +
    "\042\uffd2\001\002\000\022\004\042\005\050\006\016\013" +
    "\037\024\046\025\040\040\054\043\052\001\002\000\022" +
    "\004\042\005\050\006\016\013\037\024\046\025\040\040" +
    "\054\043\052\001\002\000\022\004\042\005\050\006\016" +
    "\013\037\024\046\025\040\040\054\043\052\001\002\000" +
    "\022\004\042\005\050\006\016\013\037\024\046\025\040" +
    "\040\054\043\052\001\002\000\022\004\042\005\050\006" +
    "\016\013\037\024\046\025\040\040\054\043\052\001\002" +
    "\000\022\004\042\005\050\006\016\013\037\024\046\025" +
    "\040\040\054\043\052\001\002\000\022\004\042\005\050" +
    "\006\016\013\037\024\046\025\040\040\054\043\052\001" +
    "\002\000\022\004\042\005\050\006\016\013\037\024\046" +
    "\025\040\040\054\043\052\001\002\000\022\004\042\005" +
    "\050\006\016\013\037\024\046\025\040\040\054\043\052" +
    "\001\002\000\022\004\042\005\050\006\016\013\037\024" +
    "\046\025\040\040\054\043\052\001\002\000\022\004\042" +
    "\005\050\006\016\013\037\024\046\025\040\040\054\043" +
    "\052\001\002\000\022\004\042\005\050\006\016\013\037" +
    "\024\046\025\040\040\054\043\052\001\002\000\022\004" +
    "\042\005\050\006\016\013\037\024\046\025\040\040\054" +
    "\043\052\001\002\000\022\004\042\005\050\006\016\013" +
    "\037\024\046\025\040\040\054\043\052\001\002\000\042" +
    "\014\uffda\022\uffda\024\063\025\056\026\062\027\065\030" +
    "\072\031\070\032\057\033\067\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\041\uffda\042\uffda\001\002\000\042\014\uffd8\022" +
    "\uffd8\024\063\025\056\026\062\027\065\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\041" +
    "\uffd8\042\uffd8\001\002\000\042\014\uffd3\022\uffd3\024\063" +
    "\025\056\026\062\027\065\030\072\031\070\032\057\033" +
    "\067\034\073\035\061\036\060\037\uffd3\041\066\042\064" +
    "\001\002\000\042\014\uffd7\022\uffd7\024\063\025\056\026" +
    "\062\027\065\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\041\uffd7\042\uffd7\001\002\000" +
    "\042\014\uffd5\022\uffd5\024\063\025\056\026\062\027\065" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\041\uffd5\042\uffd5\001\002\000\042\014\uffd0" +
    "\022\uffd0\024\063\025\056\026\062\027\065\030\072\031" +
    "\070\032\057\033\067\034\073\035\061\036\uffd0\037\uffd0" +
    "\041\uffd0\042\uffd0\001\002\000\042\014\uffdc\022\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\041\uffdc\042" +
    "\uffdc\001\002\000\042\014\uffd1\022\uffd1\024\063\025\056" +
    "\026\062\027\065\030\072\031\070\032\057\033\067\034" +
    "\073\035\061\036\uffd1\037\uffd1\041\066\042\uffd1\001\002" +
    "\000\042\014\uffdf\022\uffdf\024\uffdf\025\uffdf\026\062\027" +
    "\065\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\041\uffdf\042\uffdf\001\002\000\042\014" +
    "\uffdd\022\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\041\uffdd\042\uffdd\001\002\000\042\014\uffd9\022\uffd9" +
    "\024\063\025\056\026\062\027\065\030\072\031\070\032" +
    "\057\033\067\034\uffd9\035\uffd9\036\uffd9\037\uffd9\041\uffd9" +
    "\042\uffd9\001\002\000\042\014\uffd4\022\uffd4\024\063\025" +
    "\056\026\062\027\065\030\072\031\070\032\057\033\067" +
    "\034\073\035\061\036\uffd4\037\uffd4\041\066\042\064\001" +
    "\002\000\042\014\uffd6\022\uffd6\024\063\025\056\026\062" +
    "\027\065\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\041\uffd6\042\uffd6\001\002\000\042" +
    "\014\uffde\022\uffde\024\uffde\025\uffde\026\062\027\065\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\037\uffde\041\uffde\042\uffde\001\002\000\042\014\uffcf\022" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\041" +
    "\uffcf\042\uffcf\001\002\000\042\014\uffc5\022\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\041\uffc5\042\uffc5" +
    "\001\002\000\042\014\uffc7\022\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\041\uffc7\042\uffc7\001\002\000" +
    "\024\002\uffe1\003\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\012\uffe1\015\uffe1\016\uffe1\001\002\000\040\014\117\024" +
    "\063\025\056\026\062\027\065\030\072\031\070\032\057" +
    "\033\067\034\073\035\061\036\060\037\071\041\066\042" +
    "\064\001\002\000\042\014\uffdb\022\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\041\uffdb\042\uffdb\001\002" +
    "\000\024\002\ufff8\003\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\015\ufff8\016\ufff8\001\002\000\022\002\ufffe" +
    "\003\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\015\ufffe\016" +
    "\ufffe\001\002\000\010\016\123\022\034\023\035\001\002" +
    "\000\024\002\ufff7\003\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\015\ufff7\016\ufff7\001\002\000\024\003\127" +
    "\004\042\005\050\006\016\013\037\024\046\025\040\040" +
    "\054\043\052\001\002\000\024\002\ufff3\003\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\015\ufff3\016\ufff3\001" +
    "\002\000\040\022\131\024\063\025\056\026\062\027\065" +
    "\030\072\031\070\032\057\033\067\034\073\035\061\036" +
    "\060\037\071\041\066\042\064\001\002\000\004\022\130" +
    "\001\002\000\024\002\uffe0\003\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\015\uffe0\016\uffe0\001\002\000\024" +
    "\002\uffe2\003\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\015\uffe2\016\uffe2\001\002\000\004\022\135\001\002" +
    "\000\004\022\134\001\002\000\024\002\uffc3\003\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\015\uffc3\016\uffc3" +
    "\001\002\000\024\002\uffc2\003\uffc2\006\uffc2\007\uffc2\010" +
    "\uffc2\011\uffc2\012\uffc2\015\uffc2\016\uffc2\001\002\000\006" +
    "\021\143\022\142\001\002\000\004\022\141\001\002\000" +
    "\006\021\uffec\022\uffec\001\002\000\022\003\uffef\006\uffef" +
    "\007\uffef\010\uffef\011\uffef\015\uffef\044\uffef\045\uffef\001" +
    "\002\000\022\003\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\015\ufff0\044\ufff0\045\ufff0\001\002\000\004\006\016\001" +
    "\002\000\006\021\uffeb\022\uffeb\001\002\000\052\003\155" +
    "\014\uffe9\020\156\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\041\uffe9\042\uffe9\001" +
    "\002\000\010\003\150\004\151\006\147\001\002\000\004" +
    "\017\154\001\002\000\004\017\153\001\002\000\004\017" +
    "\152\001\002\000\052\003\uffe5\014\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\041\uffe5\042\uffe5\001\002\000\052\003\uffe3\014" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\041\uffe3\042\uffe3\001\002" +
    "\000\052\003\uffe4\014\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\041" +
    "\uffe4\042\uffe4\001\002\000\004\006\163\001\002\000\006" +
    "\004\160\006\157\001\002\000\004\017\162\001\002\000" +
    "\004\017\161\001\002\000\052\003\uffe8\014\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\041\uffe8\042\uffe8\001\002\000\052\003" +
    "\uffe7\014\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\041\uffe7\042\uffe7" +
    "\001\002\000\004\017\164\001\002\000\052\003\uffe6\014" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\041\uffe6\042\uffe6\001\002" +
    "\000\004\014\201\001\002\000\024\003\176\004\042\005" +
    "\050\006\016\013\037\024\046\025\040\040\054\043\052" +
    "\001\002\000\016\003\036\006\016\007\021\010\011\011" +
    "\014\015\026\001\002\000\024\002\uffc0\003\172\006\uffc0" +
    "\007\uffc0\010\uffc0\011\uffc0\012\171\015\uffc0\016\uffc0\001" +
    "\002\000\016\003\036\006\016\007\021\010\011\011\014" +
    "\015\026\001\002\000\016\003\036\006\016\007\021\010" +
    "\011\011\014\015\026\001\002\000\024\002\uffbe\003\uffbe" +
    "\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\015\uffbe\016" +
    "\uffbe\001\002\000\024\002\uffbf\003\uffbf\006\uffbf\007\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\015\uffbf\016\uffbf\001\002\000" +
    "\040\014\200\024\063\025\056\026\062\027\065\030\072" +
    "\031\070\032\057\033\067\034\073\035\061\036\060\037" +
    "\071\041\066\042\064\001\002\000\020\003\uffba\006\uffba" +
    "\007\uffba\010\uffba\011\uffba\014\177\015\uffba\001\002\000" +
    "\016\003\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\015\uffbc" +
    "\001\002\000\016\003\uffbd\006\uffbd\007\uffbd\010\uffbd\011" +
    "\uffbd\015\uffbd\001\002\000\016\003\uffbb\006\uffbb\007\uffbb" +
    "\010\uffbb\011\uffbb\015\uffbb\001\002\000\016\003\036\006" +
    "\016\007\021\010\011\011\014\015\026\001\002\000\024" +
    "\002\uffc1\003\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\015\uffc1\016\uffc1\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\006\002\003\005\004\001\001\000\002\001" +
    "\001\000\026\003\005\004\024\006\012\010\023\011\016" +
    "\013\011\014\007\023\014\024\026\025\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\166\001\001\000\002\001\001\000\004\012\144" +
    "\001\001\000\006\007\135\010\137\001\001\000\002\001" +
    "\001\000\004\010\132\001\001\000\020\003\032\010\023" +
    "\013\011\014\007\023\014\024\026\025\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\120\010\023" +
    "\013\011\014\007\023\014\024\026\025\017\001\001\000" +
    "\022\003\005\004\027\010\023\013\011\014\007\023\014" +
    "\024\026\025\017\001\001\000\002\001\001\000\020\003" +
    "\120\010\023\013\011\014\007\023\014\024\026\025\017" +
    "\001\001\000\020\003\032\010\023\013\011\014\007\023" +
    "\014\024\026\025\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\010\042\015\046\016" +
    "\052\017\044\020\050\021\043\022\040\001\001\000\002" +
    "\001\001\000\020\010\042\015\115\016\052\017\044\020" +
    "\050\021\043\022\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\010\042\015" +
    "\111\016\052\017\044\020\050\021\043\022\040\001\001" +
    "\000\002\001\001\000\020\010\042\015\054\016\052\017" +
    "\044\020\050\021\043\022\040\001\001\000\002\001\001" +
    "\000\020\010\042\015\110\016\052\017\044\020\050\021" +
    "\043\022\040\001\001\000\020\010\042\015\107\016\052" +
    "\017\044\020\050\021\043\022\040\001\001\000\020\010" +
    "\042\015\106\016\052\017\044\020\050\021\043\022\040" +
    "\001\001\000\020\010\042\015\105\016\052\017\044\020" +
    "\050\021\043\022\040\001\001\000\020\010\042\015\104" +
    "\016\052\017\044\020\050\021\043\022\040\001\001\000" +
    "\020\010\042\015\103\016\052\017\044\020\050\021\043" +
    "\022\040\001\001\000\020\010\042\015\102\016\052\017" +
    "\044\020\050\021\043\022\040\001\001\000\020\010\042" +
    "\015\101\016\052\017\044\020\050\021\043\022\040\001" +
    "\001\000\020\010\042\015\100\016\052\017\044\020\050" +
    "\021\043\022\040\001\001\000\020\010\042\015\077\016" +
    "\052\017\044\020\050\021\043\022\040\001\001\000\020" +
    "\010\042\015\076\016\052\017\044\020\050\021\043\022" +
    "\040\001\001\000\020\010\042\015\075\016\052\017\044" +
    "\020\050\021\043\022\040\001\001\000\020\010\042\015" +
    "\074\016\052\017\044\020\050\021\043\022\040\001\001" +
    "\000\020\010\042\015\073\016\052\017\044\020\050\021" +
    "\043\022\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\010" +
    "\042\015\125\016\052\017\044\020\050\021\043\022\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\010\042\015\174\016" +
    "\052\017\044\020\050\021\043\022\040\001\001\000\020" +
    "\003\167\010\023\013\011\014\007\023\014\024\026\025" +
    "\017\001\001\000\002\001\001\000\020\003\173\010\023" +
    "\013\011\014\007\023\014\024\026\025\017\001\001\000" +
    "\020\003\172\010\023\013\011\014\007\023\014\024\026" +
    "\025\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\202\010\023\013" +
    "\011\014\007\023\014\024\026\025\017\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public static int errors_found=0;
    // Redefinition of error functions
    /* The report_error function, in this program, is called only when
       an error, not managed by the error symbol, is found.
       Indeed, when errors are recognized by the error symbol, the function
       syntax_error (disabled in this program) is called.
       This program is an example of error function redefinition: two new
       functions are developed, pSynError and pSynWarning, used to print
       syntactical errors and warning, respectively. */
    public void report_error(String message, Object info) {
        errors_found++;
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): "+message);
            } else System.err.print(": "+message);
        else System.err.print(": "+message);
    }
    public void syntax_error(Symbol cur_token){}

    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }
    
    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= DeclarationList InstructionList 
            { parser.Tree.reduce(2,"Program",0);
              Object RESULT =null;
		
                if(parser.errors_found > 0 ){
			        System.err.println("ERROR: "+ parser.errors_found +" errors were found in the program");
			        return null; 
                }
		        System.out.println("Program correctly recognized");
		    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // InstructionList ::= Instruction 
            { parser.Tree.reduce(1,"InstructionList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // InstructionList ::= InstructionList Instruction 
            { parser.Tree.reduce(2,"InstructionList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // InstructionList ::= error Instruction 
            { parser.Tree.reduce(2,"InstructionList",0);
              Object RESULT =null;
		
                        // Error in statement: generic statement error
                        parser.report_error("Error in a statement\n",parser.getToken());
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstructionList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Instruction ::= Assignment 
            { parser.Tree.reduce(1,"Instruction",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Instruction ::= Print 
            { parser.Tree.reduce(1,"Instruction",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instruction ::= While 
            { parser.Tree.reduce(1,"Instruction",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instruction ::= If 
            { parser.Tree.reduce(1,"Instruction",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instruction ::= BO InstructionList BC 
            { parser.Tree.reduce(3,"Instruction",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Instruction ::= BO InstructionList error BC 
            { parser.Tree.reduce(4,"Instruction",1);
              Object RESULT =null;
		
                    // Missing ; before }: missing ';' symbol after a statement
                    parser.report_error("Missing ; before }\n",parser.getToken());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Instruction ::= BO error BC 
            { parser.Tree.reduce(3,"Instruction",1);
              Object RESULT =null;
		
                    // Missing ; before }: missing ';' symbol after a statement
                    parser.report_error("Missing ; before }\n",parser.getToken());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instruction ::= PointlessInstruction 
            { parser.Tree.reduce(1,"Instruction",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instruction ::= error S 
            { parser.Tree.reduce(2,"Instruction",1);
              Object RESULT =null;
		
                    // Error in statement: generic statement error
                    parser.report_error("Error in a statement\n",parser.getToken());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PointlessInstruction ::= Variable S 
            { parser.Tree.reduce(2,"PointlessInstruction",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PointlessInstruction",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DeclarationList ::= 
            { parser.Tree.reduce(0,"DeclarationList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclarationList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DeclarationList ::= DeclarationList Declaration 
            { parser.Tree.reduce(2,"DeclarationList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclarationList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Declaration ::= Type VariableList S 
            { parser.Tree.reduce(3,"Declaration",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Declaration ::= Type error S 
            { parser.Tree.reduce(3,"Declaration",0);
              Object RESULT =null;
		
                        // Error in declaration: variable declaration error
 			            parser.report_error("Error in a declaration\n",parser.getToken());
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= INT_TYPE 
            { parser.Tree.reduce(1,"Type",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= DOUBLE_TYPE 
            { parser.Tree.reduce(1,"Type",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VariableList ::= Variable 
            { parser.Tree.reduce(1,"VariableList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VariableList ::= VariableList C Variable 
            { parser.Tree.reduce(3,"VariableList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Variable ::= ID 
            { parser.Tree.reduce(1,"Variable",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Variable ::= ID ArraySubscription 
            { parser.Tree.reduce(2,"Variable",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ArraySubscription ::= ArraySubscription SO INT SC 
            { parser.Tree.reduce(4,"ArraySubscription",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArraySubscription",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ArraySubscription ::= ArraySubscription SO ID SC 
            { parser.Tree.reduce(4,"ArraySubscription",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArraySubscription",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ArraySubscription ::= ArraySubscription error ID SC 
            { parser.Tree.reduce(4,"ArraySubscription",0);
              Object RESULT =null;
		
                            // Error in vector: error accessing a vector, e.g. missing '[' or 
                            parser.report_error("Error in vector: error accessing a vector: missing '['\n",parser.getToken());
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArraySubscription",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ArraySubscription ::= SO INT SC 
            { parser.Tree.reduce(3,"ArraySubscription",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArraySubscription",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ArraySubscription ::= SO ID SC 
            { parser.Tree.reduce(3,"ArraySubscription",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArraySubscription",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ArraySubscription ::= SO error SC 
            { parser.Tree.reduce(3,"ArraySubscription",0);
              Object RESULT =null;
		
                            // wrong symbol or symbols sequence within the square brackets used for vector element access
                            parser.report_error("Error in vector: wrong symbol or symbols sequence within the square brackets used for vector element access\n",parser.getToken());
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArraySubscription",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Assignment ::= Variable EQ Expression S 
            { parser.Tree.reduce(4,"Assignment",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignment",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Assignment ::= error EQ Expression S 
            { parser.Tree.reduce(4,"Assignment",0);
              Object RESULT =null;
		
                            //Error in assignment: assignment error
 			                parser.report_error("Error in an assignment\n",parser.getToken());
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignment",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Assignment ::= Variable EQ error S 
            { parser.Tree.reduce(4,"Assignment",0);
              Object RESULT =null;
		
                            //Error in expression: mathematical, boolean or comparison expression error
 			                parser.report_error("Error in an expression\n",parser.getToken());
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignment",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expression ::= Expression PLUS Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= Expression MINUS Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= Expression STAR Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression DIV Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= RO Expression RC 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= Expression EQ_EQ Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= Expression NOT_EQ Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= Expression MIN Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= Expression MAJ Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= Expression MIN_EQ Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expression ::= Expression MAJ_EQ Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= Expression LOGICAL_AND Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expression ::= Expression LOGICAL_OR Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= LOGICAL_NOT Expression 
            { parser.Tree.reduce(2,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expression ::= Expression BITWISE_OR Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expression ::= Expression BITWISE_AND Expression 
            { parser.Tree.reduce(3,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expression ::= BITWISE_NOT Expression 
            { parser.Tree.reduce(2,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expression ::= Term 
            { parser.Tree.reduce(1,"Expression",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Term ::= Variable 
            { parser.Tree.reduce(1,"Term",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Term ::= Constant 
            { parser.Tree.reduce(1,"Term",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Constant ::= SignedInt 
            { parser.Tree.reduce(1,"Constant",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Constant ::= SignedDouble 
            { parser.Tree.reduce(1,"Constant",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Sign ::= PLUS 
            { parser.Tree.reduce(1,"Sign",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sign",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Sign ::= MINUS 
            { parser.Tree.reduce(1,"Sign",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sign",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SignedInt ::= Sign INT 
            { parser.Tree.reduce(2,"SignedInt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SignedInt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SignedInt ::= INT 
            { parser.Tree.reduce(1,"SignedInt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SignedInt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SignedDouble ::= Sign DOUBLE 
            { parser.Tree.reduce(2,"SignedDouble",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SignedDouble",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SignedDouble ::= DOUBLE 
            { parser.Tree.reduce(1,"SignedDouble",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SignedDouble",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Print ::= PRINT Variable S 
            { parser.Tree.reduce(3,"Print",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Print",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Print ::= PRINT error S 
            { parser.Tree.reduce(3,"Print",0);
              Object RESULT =null;
		
                //Error in 'print' instruction: print instruction error
                parser.report_error("Error in a print\n",parser.getToken());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Print",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // While ::= WHILE Condition Instruction 
            { parser.Tree.reduce(3,"While",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("While",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // If ::= IF Condition Instruction 
            { parser.Tree.reduce(3,"If",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("If",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // If ::= IF Condition Instruction ELSE Instruction 
            { parser.Tree.reduce(5,"If",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("If",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // If ::= IF Condition Instruction error Instruction 
            { parser.Tree.reduce(5,"If",0);
              Object RESULT =null;
		
            //Error 'else' expected in 'if' instruction: the keyword else is missing in a if construct
            parser.report_error("Error 'else' expected in 'if' instruction\n",parser.getToken());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("If",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Condition ::= RO Expression RC 
            { parser.Tree.reduce(3,"Condition",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condition",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Condition ::= RO error RC 
            { parser.Tree.reduce(3,"Condition",0);
              Object RESULT =null;
		
                    //Error in expression: mathematical, boolean or comparison expression error
                    parser.report_error("Error in an if/while expression\n",parser.getToken());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condition",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Condition ::= error RC 
            { parser.Tree.reduce(2,"Condition",0);
              Object RESULT =null;
		 
                    //Error '(' expected in 'if' instruction : if a symbol '(' or ')' misses in a if instruction
                    parser.report_error("Error '(' expected in 'if/while' instruction\n",parser.getToken());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condition",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Condition ::= RO error 
            { parser.Tree.reduce(2,"Condition",0);
              Object RESULT =null;
		 
                    //Error ')' expected in 'if' instruction: if a symbol '(' or ')' misses in a if instruction
                    parser.report_error("Error ')' expected in 'if/while' instruction\n",parser.getToken());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condition",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
