
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\004\000\002\014" +
    "\004\000\002\014\002\000\002\015\005\000\002\015\005" +
    "\000\002\020\003\000\002\020\003\000\002\016\003\000" +
    "\002\016\005\000\002\017\004\000\002\021\002\000\002" +
    "\021\006\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\005\000\002\004\006\000" +
    "\002\004\005\000\002\004\004\000\002\007\004\000\002" +
    "\007\006\000\002\007\006\000\002\007\006\000\002\010" +
    "\005\000\002\010\005\000\002\005\007\000\002\005\005" +
    "\000\002\005\007\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\006\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\004" +
    "\000\002\011\006\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\004\000\002\011\004\000\002\011\005\000" +
    "\002\012\003\000\002\012\003\000\002\013\003\000\002" +
    "\013\003\000\002\024\003\000\002\024\006\000\002\024" +
    "\006\000\002\024\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\022\003\ufffe\006\ufffe\007\ufffe\010\ufffe\012" +
    "\ufffe\015\ufffe\041\ufffe\042\ufffe\001\002\000\022\003\024" +
    "\006\026\007\020\010\011\012\022\015\021\041\015\042" +
    "\016\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\024\002\uffee\003\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\012\uffee\015\uffee\016\uffee\001\002\000\024" +
    "\002\ufff1\003\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012" +
    "\ufff1\015\ufff1\016\ufff1\001\002\000\006\003\171\013\172" +
    "\001\002\000\006\017\164\035\163\001\002\000\024\002" +
    "\uffef\003\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef" +
    "\015\uffef\016\uffef\001\002\000\022\002\ufff3\003\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\012\ufff3\015\ufff3\016\ufff3\001\002" +
    "\000\006\003\ufffb\012\ufffb\001\002\000\006\003\ufffa\012" +
    "\ufffa\001\002\000\024\002\ufff0\003\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\015\ufff0\016\ufff0\001\002\000" +
    "\006\003\145\013\146\001\002\000\016\003\136\006\026" +
    "\007\020\010\011\012\022\015\021\001\002\000\044\003" +
    "\uffc0\014\uffc0\017\uffc0\021\131\023\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\036\uffc0\037\uffc0\001\002\000\006\003\117" +
    "\012\115\001\002\000\024\003\031\006\026\007\020\010" +
    "\011\012\022\015\021\017\033\022\034\035\032\001\002" +
    "\000\022\003\uffff\006\uffff\007\uffff\010\uffff\012\uffff\015" +
    "\uffff\041\uffff\042\uffff\001\002\000\006\003\110\012\022" +
    "\001\002\000\020\002\000\003\031\006\026\007\020\010" +
    "\011\012\022\015\021\001\002\000\022\002\ufff4\003\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\012\ufff4\015\ufff4\016\ufff4\001" +
    "\002\000\010\017\033\022\034\035\032\001\002\000\020" +
    "\003\043\004\037\005\042\012\022\013\035\024\036\040" +
    "\044\001\002\000\024\002\uffea\003\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\015\uffea\016\uffea\001\002\000" +
    "\042\003\uffbd\014\uffbd\017\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\001\002\000\020\003\105" +
    "\004\037\005\042\012\022\013\035\024\036\040\044\001" +
    "\002\000\006\004\103\005\102\001\002\000\042\003\uffc9" +
    "\014\uffc9\017\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\001\002\000\042\003\uffca\014\uffca\017" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\001\002\000\036\017\101\023\055\024\046\025\054" +
    "\026\057\027\063\030\061\031\051\032\052\033\060\034" +
    "\050\035\056\036\047\037\062\001\002\000\042\003\uffc8" +
    "\014\uffc8\017\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\001\002\000\004\022\034\001\002\000" +
    "\020\003\043\004\037\005\042\012\022\013\035\024\036" +
    "\040\044\001\002\000\042\003\uffd5\014\uffd5\017\uffd5\023" +
    "\055\024\046\025\054\026\057\027\063\030\061\031\051" +
    "\032\052\033\060\034\050\035\056\036\uffd5\037\uffd5\001" +
    "\002\000\020\003\043\004\037\005\042\012\022\013\035" +
    "\024\036\040\044\001\002\000\020\003\043\004\037\005" +
    "\042\012\022\013\035\024\036\040\044\001\002\000\020" +
    "\003\uffc1\004\uffc1\005\uffc1\012\uffc1\013\uffc1\024\uffc1\040" +
    "\uffc1\001\002\000\020\003\uffc4\004\uffc4\005\uffc4\012\uffc4" +
    "\013\uffc4\024\uffc4\040\uffc4\001\002\000\020\003\uffc3\004" +
    "\uffc3\005\uffc3\012\uffc3\013\uffc3\024\uffc3\040\uffc3\001\002" +
    "\000\020\003\043\004\037\005\042\012\022\013\035\024" +
    "\036\040\044\001\002\000\020\003\043\004\037\005\042" +
    "\012\022\013\035\024\036\040\044\001\002\000\020\003" +
    "\043\004\037\005\042\012\022\013\035\024\036\040\044" +
    "\001\002\000\004\035\072\001\002\000\020\003\043\004" +
    "\037\005\042\012\022\013\035\024\036\040\044\001\002" +
    "\000\020\003\uffc2\004\uffc2\005\uffc2\012\uffc2\013\uffc2\024" +
    "\uffc2\040\uffc2\001\002\000\020\003\043\004\037\005\042" +
    "\012\022\013\035\024\036\040\044\001\002\000\020\003" +
    "\043\004\037\005\042\012\022\013\035\024\036\040\044" +
    "\001\002\000\020\003\043\004\037\005\042\012\022\013" +
    "\035\024\036\040\044\001\002\000\020\003\043\004\037" +
    "\005\042\012\022\013\035\024\036\040\044\001\002\000" +
    "\042\003\uffd1\014\uffd1\017\uffd1\023\055\024\046\025\054" +
    "\026\057\027\063\030\061\031\051\032\052\033\060\034" +
    "\050\035\056\036\047\037\062\001\002\000\042\003\uffd3" +
    "\014\uffd3\017\uffd3\023\055\024\046\025\054\026\057\027" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\001\002\000\042\003\uffd6\014\uffd6\017" +
    "\uffd6\023\055\024\046\025\054\026\057\027\063\030\061" +
    "\031\051\032\052\033\060\034\050\035\056\036\047\037" +
    "\uffd6\001\002\000\042\003\uffd2\014\uffd2\017\uffd2\023\055" +
    "\024\046\025\054\026\057\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\001\002" +
    "\000\042\003\uffcc\014\uffcc\017\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\001\002\000\020\003" +
    "\043\004\037\005\042\012\022\013\035\024\036\040\044" +
    "\001\002\000\042\003\uffd4\014\uffd4\017\uffd4\023\055\024" +
    "\046\025\054\026\057\027\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\001\002\000" +
    "\042\003\uffcf\014\uffcf\017\uffcf\023\uffcf\024\uffcf\025\054" +
    "\026\057\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\001\002\000\042\003\uffcd" +
    "\014\uffcd\017\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\001\002\000\042\003\uffd0\014\uffd0\017" +
    "\uffd0\023\055\024\046\025\054\026\057\027\063\030\061" +
    "\031\051\032\052\033\060\034\050\035\056\036\047\037" +
    "\062\001\002\000\042\003\uffd7\014\uffd7\017\uffd7\023\055" +
    "\024\046\025\054\026\057\027\063\030\061\031\051\032" +
    "\052\033\060\034\050\035\056\036\uffd7\037\uffd7\001\002" +
    "\000\042\003\uffce\014\uffce\017\uffce\023\uffce\024\uffce\025" +
    "\054\026\057\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\001\002\000\024\002" +
    "\uffe6\003\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\015\uffe6\016\uffe6\001\002\000\042\003\uffc6\014\uffc6\017" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\001\002\000\042\003\uffc7\014\uffc7\017\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\001\002" +
    "\000\036\014\107\023\055\024\046\025\054\026\057\027" +
    "\063\030\061\031\051\032\052\033\060\034\050\035\056" +
    "\036\047\037\062\001\002\000\006\014\106\022\034\001" +
    "\002\000\042\003\uffc5\014\uffc5\017\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\001\002\000\042" +
    "\003\uffcb\014\uffcb\017\uffcb\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\001\002\000\006\017\113\022" +
    "\034\001\002\000\004\017\112\001\002\000\024\002\uffe5" +
    "\003\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\015" +
    "\uffe5\016\uffe5\001\002\000\024\002\uffe4\003\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\012\uffe4\015\uffe4\016\uffe4\001" +
    "\002\000\022\002\ufff2\003\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\012\ufff2\015\ufff2\016\ufff2\001\002\000\010\017\ufff6\020" +
    "\ufff6\021\ufff6\001\002\000\006\017\123\020\122\001\002" +
    "\000\004\017\121\001\002\000\006\017\ufff9\020\ufff9\001" +
    "\002\000\022\003\ufffc\006\ufffc\007\ufffc\010\ufffc\012\ufffc" +
    "\015\ufffc\041\ufffc\042\ufffc\001\002\000\004\012\115\001" +
    "\002\000\022\003\ufffd\006\ufffd\007\ufffd\010\ufffd\012\ufffd" +
    "\015\ufffd\041\ufffd\042\ufffd\001\002\000\006\017\ufff8\020" +
    "\ufff8\001\002\000\010\017\ufff7\020\ufff7\021\126\001\002" +
    "\000\004\004\127\001\002\000\004\022\130\001\002\000" +
    "\010\017\ufff5\020\ufff5\021\ufff5\001\002\000\006\004\133" +
    "\012\132\001\002\000\004\022\135\001\002\000\004\022" +
    "\134\001\002\000\042\003\uffbf\014\uffbf\017\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\001\002" +
    "\000\042\003\uffbe\014\uffbe\017\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\001\002\000\026\003" +
    "\031\006\026\007\020\010\011\012\022\015\021\016\143" +
    "\017\033\022\034\035\032\001\002\000\020\003\141\006" +
    "\026\007\020\010\011\012\022\015\021\016\140\001\002" +
    "\000\024\002\uffed\003\uffed\006\uffed\007\uffed\010\uffed\011" +
    "\uffed\012\uffed\015\uffed\016\uffed\001\002\000\012\016\142" +
    "\017\033\022\034\035\032\001\002\000\024\002\uffec\003" +
    "\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\015\uffec" +
    "\016\uffec\001\002\000\024\002\uffeb\003\uffeb\006\uffeb\007" +
    "\uffeb\010\uffeb\011\uffeb\012\uffeb\015\uffeb\016\uffeb\001\002" +
    "\000\016\003\031\006\026\007\020\010\011\012\022\015" +
    "\021\001\002\000\020\003\043\004\037\005\042\012\022" +
    "\013\035\024\036\040\044\001\002\000\020\003\150\004" +
    "\037\005\042\012\022\013\035\024\036\040\044\001\002" +
    "\000\040\003\153\014\152\023\055\024\046\025\054\026" +
    "\057\027\063\030\061\031\051\032\052\033\060\034\050" +
    "\035\056\036\047\037\062\001\002\000\006\014\151\022" +
    "\034\001\002\000\016\003\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\012\uffdf\015\uffdf\001\002\000\016\003\uffe0\006\uffe0\007" +
    "\uffe0\010\uffe0\012\uffe0\015\uffe0\001\002\000\016\003\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\012\uffdd\015\uffdd\001\002\000" +
    "\036\014\155\023\055\024\046\025\054\026\057\027\063" +
    "\030\061\031\051\032\052\033\060\034\050\035\056\036" +
    "\047\037\062\001\002\000\016\003\uffde\006\uffde\007\uffde" +
    "\010\uffde\012\uffde\015\uffde\001\002\000\024\002\uffe2\003" +
    "\160\006\uffe2\007\uffe2\010\uffe2\011\157\012\uffe2\015\uffe2" +
    "\016\uffe2\001\002\000\016\003\031\006\026\007\020\010" +
    "\011\012\022\015\021\001\002\000\016\003\031\006\026" +
    "\007\020\010\011\012\022\015\021\001\002\000\024\002" +
    "\uffe1\003\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\015\uffe1\016\uffe1\001\002\000\024\002\uffe3\003\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\015\uffe3\016\uffe3" +
    "\001\002\000\020\003\166\004\037\005\042\012\022\013" +
    "\035\024\036\040\044\001\002\000\024\002\uffe9\003\uffe9" +
    "\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\015\uffe9\016" +
    "\uffe9\001\002\000\036\017\170\023\055\024\046\025\054" +
    "\026\057\027\063\030\061\031\051\032\052\033\060\034" +
    "\050\035\056\036\047\037\062\001\002\000\006\017\167" +
    "\022\034\001\002\000\024\002\uffe7\003\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\015\uffe7\016\uffe7\001\002" +
    "\000\024\002\uffe8\003\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\015\uffe8\016\uffe8\001\002\000\020\003\043" +
    "\004\037\005\042\012\022\013\035\024\036\040\044\001" +
    "\002\000\020\003\176\004\037\005\042\012\022\013\035" +
    "\024\036\040\044\001\002\000\016\003\031\006\026\007" +
    "\020\010\011\012\022\015\021\001\002\000\024\002\uffdc" +
    "\003\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\015" +
    "\uffdc\016\uffdc\001\002\000\040\003\201\014\200\023\055" +
    "\024\046\025\054\026\057\027\063\030\061\031\051\032" +
    "\052\033\060\034\050\035\056\036\047\037\062\001\002" +
    "\000\006\014\177\022\034\001\002\000\016\003\uffda\006" +
    "\uffda\007\uffda\010\uffda\012\uffda\015\uffda\001\002\000\016" +
    "\003\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb\015\uffdb\001" +
    "\002\000\016\003\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8" +
    "\015\uffd8\001\002\000\036\014\203\023\055\024\046\025" +
    "\054\026\057\027\063\030\061\031\051\032\052\033\060" +
    "\034\050\035\056\036\047\037\062\001\002\000\016\003" +
    "\uffd9\006\uffd9\007\uffd9\010\uffd9\012\uffd9\015\uffd9\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\006\002\004\014\003\001\001\000\024\003" +
    "\026\004\013\005\007\006\016\007\012\010\006\015\024" +
    "\020\022\024\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\143\001\001\000\020\003\136\004\013\005" +
    "\007\006\016\007\012\010\006\024\011\001\001\000\002" +
    "\001\001\000\006\016\115\017\117\001\001\000\016\004" +
    "\113\005\007\006\016\007\012\010\006\024\011\001\001" +
    "\000\002\001\001\000\004\024\110\001\001\000\016\004" +
    "\027\005\007\006\016\007\012\010\006\024\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\040\024" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\103\024\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\063\013\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\044\024" +
    "\037\001\001\000\006\012\063\013\052\001\001\000\006" +
    "\011\077\024\037\001\001\000\006\011\076\024\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\075\024\037\001\001\000\006\011\074\024" +
    "\037\001\001\000\006\011\073\024\037\001\001\000\002" +
    "\001\001\000\006\011\070\024\037\001\001\000\002\001" +
    "\001\000\006\011\067\024\037\001\001\000\006\011\066" +
    "\024\037\001\001\000\006\011\065\024\037\001\001\000" +
    "\006\011\064\024\037\001\001\000\006\012\063\013\052" +
    "\001\001\000\006\012\063\013\052\001\001\000\006\012" +
    "\063\013\052\001\001\000\006\012\063\013\052\001\001" +
    "\000\006\012\063\013\052\001\001\000\006\011\072\024" +
    "\037\001\001\000\006\012\063\013\052\001\001\000\006" +
    "\012\063\013\052\001\001\000\006\012\063\013\052\001" +
    "\001\000\006\012\063\013\052\001\001\000\006\012\063" +
    "\013\052\001\001\000\006\012\063\013\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\063\013\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\113\005\007\006" +
    "\016\007\012\010\006\024\011\001\001\000\016\004\027" +
    "\005\007\006\016\007\012\010\006\024\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\155\005\007\006\016\007\012\010" +
    "\006\024\011\001\001\000\006\011\153\024\037\001\001" +
    "\000\006\011\146\024\037\001\001\000\006\012\063\013" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\063\013\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\161" +
    "\005\007\006\016\007\012\010\006\024\011\001\001\000" +
    "\016\004\160\005\007\006\016\007\012\010\006\024\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\164\024\037\001\001\000\002\001\001\000\006\012\063" +
    "\013\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\201\024\037\001\001\000\006" +
    "\011\174\024\037\001\001\000\016\004\173\005\007\006" +
    "\016\007\012\010\006\024\011\001\001\000\002\001\001" +
    "\000\006\012\063\013\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\063\013\052\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    public boolean isCorrect = true;

    // Redefinition of error functions
    /* The report_error function, in this program, is called only when
       an error, not managed by the error symbol, is found.
       Indeed, when errors are recognized by the error symbol, the function
       syntax_error (disabled in this program) is called.
       This program is an example of error function redefinition: two new
       functions are developed, pSynError and pSynWarning, used to print
       syntactical errors and warning, respectively. */
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

        // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }


    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    private void pSynError(String message){
        System.err.println("SYN ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        parser.isCorrect = false;
        parser.done_parsing();
    }
    private void pSynWarning(String message){
        System.err.println("SYN WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        parser.isCorrect = false;
    }
        

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= decl_list stmt_list 
            { parser.Tree.reduce(2,"prog",0);
              Object RESULT =null;
		 if (parser.isCorrect) System.out.println("Program correctly recognized"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl_list ::= decl_list decl 
            { parser.Tree.reduce(2,"decl_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_list ::= 
            { parser.Tree.reduce(0,"decl_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= type var_list S 
            { parser.Tree.reduce(3,"decl",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= type error S 
            { parser.Tree.reduce(3,"decl",0);
              Object RESULT =null;
		 pSynWarning("Error in declaration"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= INT_TYPE 
            { parser.Tree.reduce(1,"type",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= DOUBLE_TYPE 
            { parser.Tree.reduce(1,"type",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_list ::= var 
            { parser.Tree.reduce(1,"var_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_list ::= var_list CM var 
            { parser.Tree.reduce(3,"var_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var ::= ID array 
            { parser.Tree.reduce(2,"var",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // array ::= 
            { parser.Tree.reduce(0,"array",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // array ::= array SO INT SC 
            { parser.Tree.reduce(4,"array",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt_list ::= stmt_list stmt 
            { parser.Tree.reduce(2,"stmt_list",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt_list ::= stmt 
            { parser.Tree.reduce(1,"stmt_list",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt_list ::= error stmt 
            { parser.Tree.reduce(2,"stmt_list",1);
              Object RESULT =null;
		 pSynWarning("Error in statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= if 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= while 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= assignment 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= print 
            { parser.Tree.reduce(1,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= BO stmt_list BC 
            { parser.Tree.reduce(3,"stmt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= BO stmt_list error BC 
            { parser.Tree.reduce(4,"stmt",0);
              Object RESULT =null;
		 pSynWarning("Missing ; before }"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= BO error BC 
            { parser.Tree.reduce(3,"stmt",0);
              Object RESULT =null;
		 pSynWarning("Missing ; before }"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= error S 
            { parser.Tree.reduce(2,"stmt",0);
              Object RESULT =null;
		 pSynWarning("Error in statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assignment ::= id S 
            { parser.Tree.reduce(2,"assignment",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assignment ::= id EQ exp S 
            { parser.Tree.reduce(4,"assignment",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assignment ::= id EQ error S 
            { parser.Tree.reduce(4,"assignment",0);
              Object RESULT =null;
		 pSynWarning("Error in expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // assignment ::= error EQ exp S 
            { parser.Tree.reduce(4,"assignment",0);
              Object RESULT =null;
		 pSynWarning("Error in assigment"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // print ::= PRINT id S 
            { parser.Tree.reduce(3,"print",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // print ::= PRINT error S 
            { parser.Tree.reduce(3,"print",0);
              Object RESULT =null;
		 pSynWarning("Error in 'print' instruction"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // if ::= IF if_condition stmt ELSE stmt 
            { parser.Tree.reduce(5,"if",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if ::= IF if_condition stmt 
            { parser.Tree.reduce(3,"if",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if ::= IF if_condition stmt error stmt 
            { parser.Tree.reduce(5,"if",0);
              Object RESULT =null;
		 pSynWarning("Error 'else' expected in 'if' instruction"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // if_condition ::= RO exp RC 
            { parser.Tree.reduce(3,"if_condition",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_condition",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // if_condition ::= RO error RC 
            { parser.Tree.reduce(3,"if_condition",0);
              Object RESULT =null;
		 pSynWarning("Error in 'if' condition"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_condition",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // if_condition ::= error exp RC 
            { parser.Tree.reduce(3,"if_condition",0);
              Object RESULT =null;
		 pSynWarning("Error '(' expected in 'if' instruciton"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_condition",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // if_condition ::= RO exp error 
            { parser.Tree.reduce(3,"if_condition",0);
              Object RESULT =null;
		 pSynWarning("Error ')' expected in 'if' instruciton"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_condition",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // while ::= WHILE while_condition stmt 
            { parser.Tree.reduce(3,"while",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // while_condition ::= RO exp RC 
            { parser.Tree.reduce(3,"while_condition",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_condition",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // while_condition ::= RO error RC 
            { parser.Tree.reduce(3,"while_condition",0);
              Object RESULT =null;
		 pSynWarning("Error in 'while' condition"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_condition",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // while_condition ::= error exp RC 
            { parser.Tree.reduce(3,"while_condition",0);
              Object RESULT =null;
		 pSynWarning("Error '(' expected in 'while' instruciton"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_condition",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // while_condition ::= RO exp error 
            { parser.Tree.reduce(3,"while_condition",0);
              Object RESULT =null;
		 pSynWarning("Error ')' expected in 'while' instruciton"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_condition",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp AND exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp OR exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= NOT exp 
            { parser.Tree.reduce(2,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp EQ EQ exp 
            { parser.Tree.reduce(4,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp MIN exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp MAJ exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp mineq exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp majeq exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp PLUS exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp MINUS exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp STAR exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp DIV exp 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= RO exp RC 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= id 
            { parser.Tree.reduce(1,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= INT 
            { parser.Tree.reduce(1,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= DOUBLE 
            { parser.Tree.reduce(1,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= MINUS INT 
            { parser.Tree.reduce(2,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= MINUS DOUBLE 
            { parser.Tree.reduce(2,"exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= RO error RC 
            { parser.Tree.reduce(3,"exp",0);
              Object RESULT =null;
		 pSynWarning("Error in expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // mineq ::= MIN_EQ 
            { parser.Tree.reduce(1,"mineq",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mineq",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // mineq ::= EQ_MIN 
            { parser.Tree.reduce(1,"mineq",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mineq",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // majeq ::= MAJ_EQ 
            { parser.Tree.reduce(1,"majeq",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("majeq",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // majeq ::= EQ_MAJ 
            { parser.Tree.reduce(1,"majeq",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("majeq",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // id ::= ID 
            { parser.Tree.reduce(1,"id",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // id ::= ID SO INT SC 
            { parser.Tree.reduce(4,"id",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // id ::= ID SO ID SC 
            { parser.Tree.reduce(4,"id",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // id ::= error SC 
            { parser.Tree.reduce(2,"id",0);
              Object RESULT =null;
		 pSynWarning("Error in vector"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
